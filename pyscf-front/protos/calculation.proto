syntax = "proto3";

package pyscf_front;

// CalculationService は量子化学計算を管理するメインサービス
service CalculationService {
  // 分子操作
  rpc CreateMolecule(CreateMoleculeRequest) returns (MoleculeResponse);
  rpc GetMolecule(GetMoleculeRequest) returns (MoleculeResponse);
  rpc UpdateMolecule(UpdateMoleculeRequest) returns (MoleculeResponse);
  rpc DeleteMolecule(DeleteMoleculeRequest) returns (DeleteMoleculeResponse);
  
  // インスタンス操作
  rpc CreateInstance(CreateInstanceRequest) returns (InstanceResponse);
  rpc GetInstance(GetInstanceRequest) returns (InstanceResponse);
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse);
  rpc UpdateInstance(UpdateInstanceRequest) returns (InstanceResponse);
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse);
  
  // 計算実行
  rpc StartCalculation(StartCalculationRequest) returns (stream CalculationProgress);
  rpc CancelCalculation(CancelCalculationRequest) returns (CancelCalculationResponse);
  rpc GetCalculationStatus(GetCalculationStatusRequest) returns (CalculationStatusResponse);
  
  // 結果取得
  rpc GetResults(GetResultsRequest) returns (ResultsResponse);
  rpc ExportResults(ExportResultsRequest) returns (ExportResultsResponse);
  
  // ジョブ管理
  rpc GetJobQueue(GetJobQueueRequest) returns (JobQueueResponse);
  rpc UpdateJobPriority(UpdateJobPriorityRequest) returns (UpdateJobPriorityResponse);
  
  // システム情報
  rpc GetSystemInfo(GetSystemInfoRequest) returns (SystemInfoResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// 分子関連メッセージ
message CreateMoleculeRequest {
  string name = 1;
  string formula = 2;
  repeated Atom atoms = 3;
  int32 charge = 4;
  int32 multiplicity = 5;
  string symmetry = 6;
  GeometryType geometry_type = 7;
}

message GetMoleculeRequest {
  string molecule_id = 1;
}

message UpdateMoleculeRequest {
  string molecule_id = 1;
  optional string name = 2;
  optional string formula = 3;
  repeated Atom atoms = 4;
  optional int32 charge = 5;
  optional int32 multiplicity = 6;
  optional string symmetry = 7;
}

message DeleteMoleculeRequest {
  string molecule_id = 1;
}

message DeleteMoleculeResponse {
  bool success = 1;
  string message = 2;
}

message MoleculeResponse {
  bool success = 1;
  string message = 2;
  optional Molecule molecule = 3;
}

message Molecule {
  string id = 1;
  string name = 2;
  string formula = 3;
  double molecular_weight = 4;
  repeated Atom atoms = 5;
  int32 charge = 6;
  int32 multiplicity = 7;
  string symmetry = 8;
  GeometryType geometry_type = 9;
  int64 created_at = 10;
}

message Atom {
  string symbol = 1;
  double x = 2;
  double y = 3;
  double z = 4;
}

enum GeometryType {
  GEOMETRY_TYPE_UNSPECIFIED = 0;
  GEOMETRY_TYPE_XYZ = 1;
  GEOMETRY_TYPE_ZMATRIX = 2;
}

// インスタンス関連メッセージ
message CreateInstanceRequest {
  string name = 1;
  string description = 2;
  string molecule_id = 3;
  optional string project_id = 4;
}

message GetInstanceRequest {
  string instance_id = 1;
}

message ListInstancesRequest {
  optional string project_id = 1;
  optional InstanceStatus status = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message ListInstancesResponse {
  bool success = 1;
  string message = 2;
  repeated Instance instances = 3;
  int32 total_count = 4;
  int32 page = 5;
  int32 page_size = 6;
}

message UpdateInstanceRequest {
  string instance_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional InstanceStatus status = 4;
}

message DeleteInstanceRequest {
  string instance_id = 1;
}

message DeleteInstanceResponse {
  bool success = 1;
  string message = 2;
}

message InstanceResponse {
  bool success = 1;
  string message = 2;
  optional Instance instance = 3;
}

message Instance {
  string id = 1;
  string name = 2;
  string description = 3;
  InstanceStatus status = 4;
  optional string user_id = 5;
  optional string project_id = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
  optional Molecule molecule = 9;
  repeated Calculation calculations = 10;
}

enum InstanceStatus {
  INSTANCE_STATUS_UNSPECIFIED = 0;
  INSTANCE_STATUS_DRAFT = 1;
  INSTANCE_STATUS_READY = 2;
  INSTANCE_STATUS_RUNNING = 3;
  INSTANCE_STATUS_COMPLETED = 4;
  INSTANCE_STATUS_ERROR = 5;
}

// 計算関連メッセージ
message StartCalculationRequest {
  string instance_id = 1;
  string method = 2;
  string basis_set = 3;
  map<string, string> parameters = 4;
  optional ConvergenceCriteria convergence_criteria = 5;
  optional int32 max_iterations = 6;
  optional int32 priority = 7;
}

message CancelCalculationRequest {
  string calculation_id = 1;
}

message CancelCalculationResponse {
  bool success = 1;
  string message = 2;
}

message GetCalculationStatusRequest {
  string calculation_id = 1;
}

message CalculationStatusResponse {
  bool success = 1;
  string message = 2;
  optional CalculationStatus status = 3;
}

message CalculationProgress {
  string calculation_id = 1;
  string job_id = 2;
  CalculationStatus status = 3;
  double progress_percentage = 4;
  string current_step = 5;
  string message = 6;
  int64 timestamp = 7;
  optional string estimated_time_remaining = 8;
}

message Calculation {
  string id = 1;
  string instance_id = 2;
  string method = 3;
  string basis_set = 4;
  map<string, string> parameters = 5;
  ConvergenceCriteria convergence_criteria = 6;
  int32 max_iterations = 7;
  optional int64 start_time = 8;
  optional int64 end_time = 9;
  CalculationStatus status = 10;
  optional string error_message = 11;
  int64 created_at = 12;
}

message ConvergenceCriteria {
  double energy_threshold = 1;
  double density_threshold = 2;
  double gradient_threshold = 3;
}

enum CalculationStatus {
  CALCULATION_STATUS_UNSPECIFIED = 0;
  CALCULATION_STATUS_PENDING = 1;
  CALCULATION_STATUS_RUNNING = 2;
  CALCULATION_STATUS_COMPLETED = 3;
  CALCULATION_STATUS_FAILED = 4;
  CALCULATION_STATUS_CANCELLED = 5;
}

// 結果関連メッセージ
message GetResultsRequest {
  string calculation_id = 1;
  repeated string result_types = 2; // energy, orbitals, frequencies, etc.
}

message ExportResultsRequest {
  string calculation_id = 1;
  ExportFormat format = 2;
  repeated string result_types = 3;
}

message ExportResultsResponse {
  bool success = 1;
  string message = 2;
  optional string file_path = 3;
  optional bytes file_data = 4;
}

message ResultsResponse {
  bool success = 1;
  string message = 2;
  optional CalculationResults results = 3;
}

message CalculationResults {
  string calculation_id = 1;
  bool converged = 2;
  double total_energy = 3;
  string energy_unit = 4;
  int32 calculation_time_seconds = 5;
  optional EnergyResults energy_results = 6;
  optional OrbitalResults orbital_results = 7;
  optional FrequencyResults frequency_results = 8;
  optional PropertyResults property_results = 9;
}

message EnergyResults {
  double total_energy = 1;
  double nuclear_repulsion_energy = 2;
  double electronic_energy = 3;
  optional double correlation_energy = 4;
  repeated EnergyComponent components = 5;
}

message EnergyComponent {
  string name = 1;
  double value = 2;
  string unit = 3;
}

message OrbitalResults {
  double homo_energy = 1;
  double lumo_energy = 2;
  double homo_lumo_gap = 3;
  repeated double orbital_energies = 4;
  repeated double occupations = 5;
  optional bytes molecular_orbitals = 6; // 分子軌道データ（バイナリ）
}

message FrequencyResults {
  repeated double frequencies = 1;
  repeated double intensities = 2;
  optional bytes normal_modes = 3; // 振動モードデータ（バイナリ）
}

message PropertyResults {
  optional DipoleProperty dipole_moment = 1;
  optional QuadrupoleProperty quadrupole_moment = 2;
  repeated ChargeProperty atomic_charges = 3;
}

message DipoleProperty {
  double magnitude = 1;
  double x = 2;
  double y = 3;
  double z = 4;
  string unit = 5;
}

message QuadrupoleProperty {
  repeated double tensor = 1; // 3x3 tensor flattened
  string unit = 2;
}

message ChargeProperty {
  int32 atom_index = 1;
  string method = 2; // Mulliken, Lowdin, etc.
  double charge = 3;
}

enum ExportFormat {
  EXPORT_FORMAT_UNSPECIFIED = 0;
  EXPORT_FORMAT_JSON = 1;
  EXPORT_FORMAT_XML = 2;
  EXPORT_FORMAT_HDF5 = 3;
  EXPORT_FORMAT_PDF = 4;
}

// ジョブキュー関連メッセージ
message GetJobQueueRequest {
  optional JobStatus status_filter = 1;
}

message UpdateJobPriorityRequest {
  string job_id = 1;
  int32 new_priority = 2;
}

message UpdateJobPriorityResponse {
  bool success = 1;
  string message = 2;
}

message JobQueueResponse {
  bool success = 1;
  string message = 2;
  repeated JobInfo jobs = 3;
}

message JobInfo {
  string id = 1;
  string calculation_id = 2;
  int32 priority = 3;
  JobStatus status = 4;
  optional string assigned_worker = 5;
  int64 created_at = 6;
  optional int64 started_at = 7;
  optional int64 completed_at = 8;
}

enum JobStatus {
  JOB_STATUS_UNSPECIFIED = 0;
  JOB_STATUS_WAITING = 1;
  JOB_STATUS_RUNNING = 2;
  JOB_STATUS_COMPLETED = 3;
  JOB_STATUS_FAILED = 4;
}

// システム情報関連メッセージ
message GetSystemInfoRequest {}

message SystemInfoResponse {
  bool success = 1;
  string message = 2;
  optional SystemInfo system_info = 3;
}

message SystemInfo {
  string version = 1;
  string python_version = 2;
  string pyscf_version = 3;
  bool gpu_available = 4;
  repeated string available_methods = 5;
  repeated string available_basis_sets = 6;
  SystemResources resources = 7;
}

message SystemResources {
  int32 cpu_cores = 1;
  int64 total_memory_mb = 2;
  int64 available_memory_mb = 3;
  int64 disk_space_mb = 4;
  repeated GpuInfo gpus = 5;
}

message GpuInfo {
  string name = 1;
  int64 memory_mb = 2;
  string driver_version = 3;
}

// ヘルスチェック関連メッセージ
message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
  string status = 2;
  map<string, string> details = 3;
  int64 timestamp = 4;
}