/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Check if the API server is running
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pubchem/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search PubChem for compounds
         * @description Search PubChem by name, CID, or formula and return 3D structure in XYZ format
         */
        post: operations["searchPubChem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/smiles/convert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert SMILES to XYZ format
         * @description Convert a SMILES string to 3D XYZ molecular structure
         */
        post: operations["convertSmiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pubchem/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate XYZ format
         * @description Validate an XYZ format string
         */
        post: operations["validateXYZ"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start quantum chemistry calculation
         * @description Start a DFT calculation in the background
         */
        post: operations["startCalculation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all calculations
         * @description Get a list of all available calculation directories
         */
        get: operations["listCalculations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations/{calculationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get calculation details
         * @description Get detailed information about a specific calculation
         */
        get: operations["getCalculationDetails"];
        /**
         * Update calculation metadata
         * @description Update calculation name and other metadata
         */
        put: operations["updateCalculation"];
        post?: never;
        /**
         * Delete calculation
         * @description Delete a calculation and all its associated files
         */
        delete: operations["deleteCalculation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Type of PubChem search
         * @enum {string}
         */
        SearchType: "name" | "cid" | "formula";
        /**
         * @description Solvent calculation method
         * @enum {string}
         */
        SolventMethod: "none" | "ief-pcm" | "c-pcm" | "cosmo" | "ssvpe" | "ddcosmo";
        /**
         * @description Quantum calculation method
         * @enum {string}
         */
        CalculationMethod: "DFT" | "HF" | "MP2" | "TDDFT";
        /**
         * @description Status of a calculation
         * @enum {string}
         */
        CalculationStatus: "pending" | "running" | "completed" | "error";
        PubChemSearchRequest: {
            /** @description Search query for PubChem */
            query: string;
            /** @default name */
            search_type: components["schemas"]["SearchType"];
        };
        SMILESConvertRequest: {
            /** @description SMILES string to convert to XYZ format */
            smiles: string;
        };
        XYZValidateRequest: {
            /** @description XYZ string to validate */
            xyz: string;
        };
        QuantumCalculationRequest: {
            /** @description XYZ molecular structure data */
            xyz: string;
            /** @default DFT */
            calculation_method: components["schemas"]["CalculationMethod"];
            /**
             * @description Basis set for calculation (e.g., STO-3G, 6-31G(d), 6-31+G(d,p), cc-pVDZ, aug-cc-pVTZ, def2-SVP)
             * @default 6-31G(d)
             */
            basis_function: string;
            /**
             * @description Exchange-correlation functional (e.g., B3LYP, PBE0, M06-2X, CAM-B3LYP, PBE, BLYP, M06, TPSS)
             * @default B3LYP
             */
            exchange_correlation: string;
            /**
             * @description Molecular charge
             * @default 0
             */
            charges: number;
            /**
             * @description Spin multiplicity
             * @default 1
             */
            spin_multiplicity: number;
            /** @default none */
            solvent_method: components["schemas"]["SolventMethod"];
            /**
             * @description Solvent type or custom parameters. Options include:
             *     - Predefined solvents: water, dimethylsulfoxide, n,n-dimethylformamide, nitromethane, methanol, ethanol, acetone, dichloroethane, dichloromethane, tetrahydrofuran, chlorobenzene, chloroform, diethylether, toluene, benzene, 1,4-dioxane, cyclohexane
             *     - Custom dielectric constant (numeric value > 1.0)
             *
             * @default -
             */
            solvent: string;
            /**
             * @description Name for the calculation
             * @default Unnamed Calculation
             */
            name: string;
            /** @description Number of CPU cores */
            cpu_cores?: number | null;
            /** @description Memory in MB */
            memory_mb?: number | null;
            /**
             * @description Number of excited states to calculate (TDDFT only)
             * @default 10
             */
            tddft_nstates: number;
            /**
             * @description TDDFT calculation method - TDDFT or Tamm-Dancoff approximation
             * @default TDDFT
             * @enum {string}
             */
            tddft_method: "TDDFT" | "TDA";
            /**
             * @description Perform Natural Transition Orbital analysis (TDDFT only)
             * @default false
             */
            tddft_analyze_nto: boolean;
        };
        CalculationUpdateRequest: {
            /** @description Updated name for the calculation */
            name: string;
        };
        HealthResponse: {
            /** @example ok */
            status: string;
            /** @example pyscf-front-api */
            service: string;
            /** @example 0.3.0 */
            version: string;
        };
        PubChemCompoundInfo: {
            /** @description PubChem Compound ID */
            cid: number;
            /** @description IUPAC name */
            iupac_name: string;
            /** @description Molecular formula */
            molecular_formula: string;
            /** @description Molecular weight */
            molecular_weight: number;
            /** @description List of synonyms */
            synonyms: string[];
        };
        PubChemSearchResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description XYZ format molecular structure */
                xyz: string;
                compound_info: components["schemas"]["PubChemCompoundInfo"];
                /** @description Number of atoms in the molecule */
                atom_count: number;
            };
        };
        SMILESConvertResponse: {
            /** @example true */
            success: boolean;
            /** SMILESConvertData */
            data: {
                /** @description XYZ format molecular structure */
                xyz: string;
            };
        };
        XYZValidateResponse: {
            /** @example true */
            success: boolean;
            /** @description Validation result */
            data: {
                /** @description Whether the XYZ format is valid */
                valid: boolean;
                /** @description Error message if validation failed */
                error?: string;
                /** @description Number of atoms in the molecule (if valid) */
                num_atoms?: number;
                /** @description Title line from XYZ file (if valid) */
                title?: string;
                /** @description Array of atom data (if valid) */
                atoms?: {
                    /** @description Element symbol */
                    element: string;
                    /**
                     * Format: float
                     * @description X coordinate
                     */
                    x: number;
                    /**
                     * Format: float
                     * @description Y coordinate
                     */
                    y: number;
                    /**
                     * Format: float
                     * @description Z coordinate
                     */
                    z: number;
                }[];
            };
        };
        CalculationParameters: {
            calculation_method: components["schemas"]["CalculationMethod"];
            basis_function: string;
            exchange_correlation: string;
            charges: number;
            spin_multiplicity: number;
            solvent_method: components["schemas"]["SolventMethod"];
            solvent: string;
            xyz: string;
            molecule_name?: string | null;
            cpu_cores?: number | null;
            memory_mb?: number | null;
            /** Format: date-time */
            created_at?: string | null;
            /** @description Number of excited states (TDDFT only) */
            tddft_nstates?: number | null;
            /** @description TDDFT method used */
            tddft_method?: string | null;
            /** @description Whether NTO analysis was performed */
            tddft_analyze_nto?: boolean | null;
        };
        CalculationResults: {
            /** @description SCF energy result */
            scf_energy?: number;
            /** @description Whether calculation converged */
            converged?: boolean;
            /** @description HOMO orbital index */
            homo_index?: number;
            /** @description LUMO orbital index */
            lumo_index?: number;
            /** @description Number of occupied orbitals */
            num_occupied_orbitals?: number;
            /** @description Number of virtual orbitals */
            num_virtual_orbitals?: number;
            /** @description Path to checkpoint file */
            checkpoint_file?: string;
            /** @description Whether checkpoint file exists */
            checkpoint_exists?: boolean;
            /** @description Working directory path */
            working_directory?: string;
            /** @description Optimized molecular geometry */
            optimized_geometry?: string;
            /** @description Basis set used */
            basis?: string;
            /** @description Exchange-correlation functional used */
            xc_functional?: string;
            /** @description Molecular charge */
            charge?: number;
            /** @description Spin multiplicity */
            spin_multiplicity?: number;
            /** @description Maximum SCF cycles */
            max_cycle?: number;
            /** @description Number of atoms */
            atom_count?: number;
            /** @description Error message if calculation failed */
            error?: string | null;
            /** @description Excitation energies in eV (TDDFT only) */
            excitation_energies?: number[] | null;
            /** @description Excitation wavelengths in nm (TDDFT only) */
            excitation_wavelengths?: number[] | null;
            /** @description Oscillator strengths for transitions (TDDFT only) */
            oscillator_strengths?: number[] | null;
            /** @description Transition dipole moments (TDDFT only) */
            transition_dipoles?: {
                x?: number;
                y?: number;
                z?: number;
            }[] | null;
            /** @description Major orbital transitions (TDDFT only) */
            major_transitions?: {
                /** @description Excited state number */
                state?: number;
                /** @description Excitation energy in eV */
                energy?: number;
                /** @description Wavelength in nm */
                wavelength?: number;
                /** @description Oscillator strength */
                oscillator_strength?: number;
                /** @description Main orbital transition (e.g., HOMO -> LUMO) */
                dominant_transition?: string;
            }[] | null;
        };
        CalculationInstance: {
            /** @description Unique calculation ID */
            id: string;
            /** @description Display name for the calculation */
            name: string;
            status: components["schemas"]["CalculationStatus"];
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
            parameters: components["schemas"]["CalculationParameters"];
            results?: components["schemas"]["CalculationResults"];
            /** @description Path to calculation files */
            workingDirectory?: string | null;
            /** @description Error details if status is error */
            errorMessage?: string | null;
        };
        CalculationSummary: {
            /** @description Unique calculation ID */
            id: string;
            /** @description Display name */
            name: string;
            /** @description Directory path */
            path: string;
            /** @description Date string */
            date: string;
            /** @description Whether checkpoint file exists */
            has_checkpoint: boolean;
            status: components["schemas"]["CalculationStatus"];
        };
        StartCalculationResponse: {
            /** @example true */
            success: boolean;
            data: {
                calculation: components["schemas"]["CalculationInstance"];
            };
        };
        CalculationListResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description Base directory for calculations */
                base_directory: string;
                calculations: components["schemas"]["CalculationSummary"][];
                /** @description Number of calculations */
                count: number;
            };
        };
        CalculationDetailsResponse: {
            /** @example true */
            success: boolean;
            data: {
                calculation: components["schemas"]["CalculationInstance"];
                files: {
                    checkpoint_exists: boolean;
                    parameters_file_exists: boolean;
                    results_file_exists: boolean;
                };
            };
        };
        CalculationUpdateResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @example Calculation renamed successfully. */
                message: string;
                /** @description Updated calculation name */
                name: string;
            };
        };
        CalculationDeleteResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @example Calculation deleted successfully */
                message: string;
                /** @description ID of deleted calculation */
                deleted_id: string;
            };
        };
        ErrorResponse: {
            /** @example false */
            success: boolean;
            /** @description Error message */
            error: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    searchPubChem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PubChemSearchRequest"];
            };
        };
        responses: {
            /** @description Compound found and XYZ generated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PubChemSearchResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Compound not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    convertSmiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMILESConvertRequest"];
            };
        };
        responses: {
            /** @description SMILES converted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMILESConvertResponse"];
                };
            };
            /** @description Invalid SMILES string */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    validateXYZ: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["XYZValidateRequest"];
            };
        };
        responses: {
            /** @description XYZ validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["XYZValidateResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    startCalculation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuantumCalculationRequest"];
            };
        };
        responses: {
            /** @description Calculation queued successfully */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StartCalculationResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to queue calculation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCalculations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of calculations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationListResponse"];
                };
            };
            /** @description Failed to list calculations */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCalculationDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Calculation details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationDetailsResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to get calculation details */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateCalculation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CalculationUpdateRequest"];
            };
        };
        responses: {
            /** @description Calculation updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationUpdateResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Name conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to update calculation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCalculation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Calculation deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationDeleteResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to delete calculation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
