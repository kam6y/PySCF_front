/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Check if the API server is running
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pubchem/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search PubChem for compounds
         * @description Search PubChem by name, CID, or formula and return 3D structure in XYZ format
         */
        post: operations["searchPubChem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/smiles/convert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert SMILES to XYZ format
         * @description Convert a SMILES string to 3D XYZ molecular structure
         */
        post: operations["convertSmiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pubchem/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate XYZ format
         * @description Validate an XYZ format string
         */
        post: operations["validateXYZ"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start quantum chemistry calculation
         * @description Start a calculation in the background
         */
        post: operations["startCalculation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all calculations
         * @description Get a list of all available calculation directories
         */
        get: operations["listCalculations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations/{calculationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get calculation details
         * @description Get detailed information about a specific calculation
         */
        get: operations["getCalculationDetails"];
        /**
         * Update calculation metadata
         * @description Update calculation name and other metadata
         */
        put: operations["updateCalculation"];
        post?: never;
        /**
         * Delete calculation
         * @description Delete a calculation and all its associated files
         */
        delete: operations["deleteCalculation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations/{calculationId}/orbitals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get molecular orbital information
         * @description Get list of all molecular orbitals with energies and indices
         */
        get: operations["getOrbitals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations/{calculationId}/orbitals/{orbitalIndex}/cube": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate and get molecular orbital CUBE file
         * @description Generate CUBE file for specific molecular orbital visualization
         */
        get: operations["getOrbitalCube"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations/{calculationId}/orbitals/cube-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List CUBE files for a calculation
         * @description List all saved CUBE files for molecular orbitals in a calculation
         */
        get: operations["listCubeFiles"];
        put?: never;
        post?: never;
        /**
         * Delete CUBE files for a calculation
         * @description Delete CUBE files for specific orbital or all orbitals in a calculation
         */
        delete: operations["deleteCubeFiles"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/calculations/{calculationId}/ir-spectrum": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate IR spectrum for a calculation
         * @description Generate theoretical IR spectrum from vibrational frequency data with scale factor corrections and Lorentzian broadening
         */
        get: operations["getIRSpectrum"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quantum/supported-parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get supported quantum chemistry parameters
         * @description Get lists of supported calculation methods, basis functions, exchange-correlation functionals, and solvents
         */
        get: operations["getSupportedParameters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application settings
         * @description Retrieve current application settings including parallel processing limits
         */
        get: operations["getSettings"];
        /**
         * Update application settings
         * @description Update application settings including parallel processing limits
         */
        put: operations["updateSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/resource-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get system resource status
         * @description Get current system resource information, constraints, and allocation status
         */
        get: operations["getSystemResourceStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Type of PubChem search
         * @enum {string}
         */
        SearchType: "name" | "cid" | "formula";
        /**
         * @description Solvent calculation method
         * @enum {string}
         */
        SolventMethod: "none" | "ief-pcm" | "c-pcm" | "cosmo" | "ssvpe" | "ddcosmo";
        /**
         * @description Quantum calculation method
         * @enum {string}
         */
        CalculationMethod: "DFT" | "HF" | "MP2" | "CCSD" | "CCSD_T" | "TDDFT" | "CASCI" | "CASSCF";
        /**
         * @description Status of a calculation
         * @enum {string}
         */
        CalculationStatus: "pending" | "running" | "completed" | "error" | "waiting";
        PubChemSearchRequest: {
            /** @description Search query for PubChem */
            query: string;
            /** @default name */
            search_type: components["schemas"]["SearchType"];
        };
        SMILESConvertRequest: {
            /** @description SMILES string to convert to XYZ format */
            smiles: string;
        };
        XYZValidateRequest: {
            /** @description XYZ string to validate */
            xyz: string;
        };
        QuantumCalculationRequest: {
            /** @description XYZ molecular structure data */
            xyz: string;
            /** @default DFT */
            calculation_method: components["schemas"]["CalculationMethod"];
            /**
             * @description Basis set for calculation (e.g., STO-3G, 6-31G(d), 6-31+G(d,p), cc-pVDZ, aug-cc-pVTZ, def2-SVP)
             * @default 6-31G(d)
             */
            basis_function: string;
            /**
             * @description Exchange-correlation functional (e.g., B3LYP, PBE0, M06-2X, CAM-B3LYP, PBE, BLYP, M06, TPSS). Note - This parameter is ignored for HF method as Hartree-Fock calculations do not use exchange-correlation functionals.
             * @default B3LYP
             */
            exchange_correlation: string | null;
            /**
             * @description Molecular charge
             * @default 0
             */
            charges: number;
            /**
             * @description Spin (2S), number of unpaired electrons
             * @default 0
             */
            spin: number;
            /** @default none */
            solvent_method: components["schemas"]["SolventMethod"];
            /**
             * @description Solvent type or custom parameters. Options include:
             *     - Predefined solvents: water, dimethylsulfoxide, n,n-dimethylformamide, nitromethane, methanol, ethanol, acetone, dichloroethane, dichloromethane, tetrahydrofuran, chlorobenzene, chloroform, diethylether, toluene, benzene, 1,4-dioxane, cyclohexane
             *     - Custom dielectric constant (numeric value > 1.0)
             *
             * @default -
             */
            solvent: string;
            /**
             * @description Name for the calculation
             * @default Unnamed Calculation
             */
            name: string;
            /** @description Number of CPU cores */
            cpu_cores?: number | null;
            /** @description Memory in MB */
            memory_mb?: number | null;
            /**
             * @description Number of excited states to calculate (TDDFT only)
             * @default 10
             */
            tddft_nstates: number;
            /**
             * @description TDDFT calculation method - TDDFT or Tamm-Dancoff approximation
             * @default TDDFT
             * @enum {string}
             */
            tddft_method: "TDDFT" | "TDA";
            /**
             * @description Perform Natural Transition Orbital analysis (TDDFT only)
             * @default false
             */
            tddft_analyze_nto: boolean;
            /**
             * @description Number of active space orbitals (CASCI/CASSCF only)
             * @default 4
             */
            ncas: number;
            /**
             * @description Number of active space electrons (CASCI/CASSCF only)
             * @default 4
             */
            nelecas: number;
            /**
             * @description Maximum CASSCF macro iterations (CASSCF only)
             * @default 50
             */
            max_cycle_macro: number;
            /**
             * @description Maximum CI solver micro iterations (CASCI/CASSCF)
             * @default 3
             */
            max_cycle_micro: number;
            /**
             * @description Transform to natural orbitals in active space (CASCI/CASSCF only)
             * @default true
             */
            natorb: boolean;
            /**
             * Format: float
             * @description Energy convergence tolerance (CASSCF only)
             * @default 0.000001
             */
            conv_tol: number;
            /**
             * Format: float
             * @description Gradient convergence tolerance (CASSCF only)
             * @default 0.0001
             */
            conv_tol_grad: number;
            /**
             * @description Whether to perform geometry optimization before the main calculation
             * @default true
             */
            optimize_geometry: boolean;
        };
        CalculationUpdateRequest: {
            /** @description Updated name for the calculation */
            name: string;
        };
        HealthResponse: {
            /** @example ok */
            status: string;
            /** @example pyscf-front-api */
            service: string;
            /** @example 0.3.0 */
            version: string;
        };
        PubChemCompoundInfo: {
            /** @description PubChem Compound ID */
            cid: number;
            /** @description IUPAC name */
            iupac_name: string;
            /** @description Molecular formula */
            molecular_formula: string;
            /** @description Molecular weight */
            molecular_weight: number;
            /** @description List of synonyms */
            synonyms: string[];
        };
        PubChemSearchResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description XYZ format molecular structure */
                xyz: string;
                compound_info: components["schemas"]["PubChemCompoundInfo"];
                /** @description Number of atoms in the molecule */
                atom_count: number;
            };
        };
        SMILESConvertResponse: {
            /** @example true */
            success: boolean;
            /** SMILESConvertData */
            data: {
                /** @description XYZ format molecular structure */
                xyz: string;
            };
        };
        XYZValidateResponse: {
            /** @example true */
            success: boolean;
            /** @description Validation result */
            data: {
                /** @description Whether the XYZ format is valid */
                valid: boolean;
                /** @description Error message if validation failed */
                error?: string;
                /** @description Number of atoms in the molecule (if valid) */
                num_atoms?: number;
                /** @description Title line from XYZ file (if valid) */
                title?: string;
                /** @description Array of atom data (if valid) */
                atoms?: {
                    /** @description Element symbol */
                    element: string;
                    /**
                     * Format: float
                     * @description X coordinate
                     */
                    x: number;
                    /**
                     * Format: float
                     * @description Y coordinate
                     */
                    y: number;
                    /**
                     * Format: float
                     * @description Z coordinate
                     */
                    z: number;
                }[];
            };
        };
        CalculationParameters: {
            calculation_method: components["schemas"]["CalculationMethod"];
            basis_function: string;
            /** @description Exchange-correlation functional. Note - This parameter is ignored for HF method as Hartree-Fock calculations do not use exchange-correlation functionals. */
            exchange_correlation?: string | null;
            charges: number;
            spin: number;
            solvent_method: components["schemas"]["SolventMethod"];
            solvent: string;
            xyz: string;
            molecule_name?: string | null;
            cpu_cores?: number | null;
            memory_mb?: number | null;
            /** Format: date-time */
            created_at?: string | null;
            /** @description Number of excited states (TDDFT only) */
            tddft_nstates?: number | null;
            /** @description TDDFT method used */
            tddft_method?: string | null;
            /** @description Whether NTO analysis was performed */
            tddft_analyze_nto?: boolean | null;
            /** @description Number of active space orbitals (CASCI/CASSCF) */
            ncas?: number | null;
            /** @description Number of active space electrons (CASCI/CASSCF) */
            nelecas?: number | null;
            /** @description Maximum CASSCF macro iterations */
            max_cycle_macro?: number | null;
            /** @description Maximum CI solver micro iterations */
            max_cycle_micro?: number | null;
            /** @description Whether natural orbital transformation was used */
            natorb?: boolean | null;
            /**
             * Format: float
             * @description Energy convergence tolerance used
             */
            conv_tol?: number | null;
            /**
             * Format: float
             * @description Gradient convergence tolerance used
             */
            conv_tol_grad?: number | null;
        };
        CalculationResults: {
            /** @description SCF energy result */
            scf_energy?: number;
            /** @description Whether calculation converged */
            converged?: boolean;
            /** @description HOMO orbital index */
            homo_index?: number;
            /** @description LUMO orbital index */
            lumo_index?: number;
            /** @description Number of occupied orbitals */
            num_occupied_orbitals?: number;
            /** @description Number of virtual orbitals */
            num_virtual_orbitals?: number;
            /** @description Path to checkpoint file */
            checkpoint_file?: string;
            /** @description Whether checkpoint file exists */
            checkpoint_exists?: boolean;
            /** @description Working directory path */
            working_directory?: string;
            /** @description Optimized molecular geometry */
            optimized_geometry?: string;
            /** @description Basis set used */
            basis?: string;
            /** @description Exchange-correlation functional used */
            xc_functional?: string;
            /** @description Molecular charge */
            charge?: number;
            /** @description Spin (2S), number of unpaired electrons */
            spin?: number;
            /** @description Maximum SCF cycles */
            max_cycle?: number;
            /** @description Number of atoms */
            atom_count?: number;
            /** @description Error message if calculation failed */
            error?: string | null;
            /** @description Excitation energies in eV (TDDFT only) */
            excitation_energies?: number[] | null;
            /** @description Excitation wavelengths in nm (TDDFT only) */
            excitation_wavelengths?: number[] | null;
            /** @description Oscillator strengths for transitions (TDDFT only) */
            oscillator_strengths?: number[] | null;
            /** @description Transition dipole moments (TDDFT only) */
            transition_dipoles?: {
                x?: number;
                y?: number;
                z?: number;
            }[] | null;
            /** @description Major orbital transitions (TDDFT only) */
            major_transitions?: {
                /** @description Excited state number */
                state?: number;
                /** @description Excitation energy in eV */
                energy?: number;
                /** @description Wavelength in nm */
                wavelength?: number;
                /** @description Oscillator strength */
                oscillator_strength?: number;
                /** @description Main orbital transition (e.g., HOMO -> LUMO) */
                dominant_transition?: string;
            }[] | null;
            /** @description Natural Transition Orbital analysis results (TDDFT only) */
            nto_analysis?: {
                /** @description Excited state number (1-indexed) */
                state?: number;
                /** @description Excitation energy in eV */
                energy?: number;
                /** @description NTO orbital pairs for this excited state */
                nto_pairs?: {
                    /** @description Description of hole orbital (e.g., HOMO, HOMO-1) */
                    hole_orbital?: string;
                    /** @description Description of particle orbital (e.g., LUMO, LUMO+1) */
                    particle_orbital?: string;
                    /** @description NTO weight (singular value) */
                    weight?: number;
                    /** @description Percentage contribution to the transition */
                    contribution?: number;
                    /** @description Index of the hole orbital */
                    hole_orbital_index?: number;
                    /** @description Index of the particle orbital */
                    particle_orbital_index?: number;
                }[];
                /** @description Total number of NTO pairs analyzed */
                total_nto_pairs?: number;
            }[] | null;
            /** @description Mulliken population analysis charges for each atom */
            mulliken_charges?: {
                /** @description 0-based index of the atom */
                atom_index?: number;
                /** @description Element symbol (e.g., C, H, O, N) */
                element?: string;
                /** @description Mulliken charge on this atom (positive = electron deficient, negative = electron rich) */
                charge?: number;
            }[] | null;
            /** @description Whether vibrational frequency analysis was performed */
            frequency_analysis_performed?: boolean | null;
            /** @description Vibrational frequencies in cm⁻¹ (positive frequencies only, excluding low-frequency modes) */
            vibrational_frequencies?: number[] | null;
            /** @description Number of imaginary frequencies (negative eigenvalues) - indicates optimization quality */
            imaginary_frequencies_count?: number | null;
            /** @description Zero-point vibrational energy in Hartree */
            zero_point_energy?: number | null;
            /** @description Thermal energy at 298.15 K in Hartree */
            thermal_energy_298K?: number | null;
            /** @description Entropy at 298.15 K in Hartree/K */
            entropy_298K?: number | null;
            /** @description Gibbs free energy at 298.15 K in Hartree */
            gibbs_free_energy_298K?: number | null;
            /** @description Heat capacity at 298.15 K in Hartree/K */
            heat_capacity_298K?: number | null;
            /** @description CASCI energy in Hartree (CASCI only) */
            casci_energy?: number | null;
            /** @description CASSCF energy in Hartree (CASSCF only) */
            casscf_energy?: number | null;
            /** @description Correlation energy (CASCI/CASSCF - SCF) in Hartree */
            correlation_energy?: number | null;
            /** @description Number of CASSCF macro iterations performed */
            macro_iterations?: number | null;
            /** @description Natural orbital analysis results (CASCI/CASSCF) */
            natural_orbital_analysis?: components["schemas"]["NaturalOrbitalAnalysis"];
            /** @description CI coefficient analysis results (CASCI/CASSCF) */
            ci_coefficient_analysis?: components["schemas"]["CICoefficientAnalysis"];
            /** @description Mulliken atomic spin density analysis (CASCI/CASSCF open-shell) */
            mulliken_spin_analysis?: components["schemas"]["MullikenSpinAnalysis"];
            /** @description Orbital overlap analysis between SCF and CASCI/CASSCF orbitals */
            orbital_overlap_analysis?: components["schemas"]["OrbitalOverlapAnalysis"];
            /** @description Orbital rotation analysis during CASSCF optimization (CASSCF only) */
            orbital_rotation_analysis?: components["schemas"]["OrbitalRotationAnalysis"];
            /** @description Information about kernel() return value structure */
            kernel_return_info?: ({
                /** @description Number of elements in kernel() return tuple */
                tuple_length?: number;
                /** @description Shape of CI coefficients array */
                ci_coefficients_shape?: string;
            } & {
                [key: string]: unknown;
            }) | null;
            /** @description Whether CI coefficients are available from kernel() return */
            ci_coefficients_available?: boolean | null;
            /** @description Enhanced CI coefficient analysis from kernel() return */
            enhanced_ci_analysis?: components["schemas"]["EnhancedCIAnalysis"];
        };
        CalculationInstance: {
            /** @description Unique calculation ID */
            id: string;
            /** @description Display name for the calculation */
            name: string;
            status: components["schemas"]["CalculationStatus"];
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updatedAt: string;
            parameters: components["schemas"]["CalculationParameters"];
            results?: components["schemas"]["CalculationResults"];
            /** @description Path to calculation files */
            workingDirectory?: string | null;
            /** @description Error details if status is error */
            errorMessage?: string | null;
            /** @description Reason why calculation is waiting (if status is waiting) */
            waitingReason?: string | null;
        };
        CalculationSummary: {
            /** @description Unique calculation ID */
            id: string;
            /** @description Display name */
            name: string;
            /** @description Directory path */
            path: string;
            /** @description Date string */
            date: string;
            /** @description Whether checkpoint file exists */
            has_checkpoint: boolean;
            status: components["schemas"]["CalculationStatus"];
        };
        StartCalculationResponse: {
            /** @example true */
            success: boolean;
            data: {
                calculation: components["schemas"]["CalculationInstance"];
            };
        };
        CalculationListResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description Base directory for calculations */
                base_directory: string;
                calculations: components["schemas"]["CalculationSummary"][];
                /** @description Number of calculations */
                count: number;
            };
        };
        CalculationDetailsResponse: {
            /** @example true */
            success: boolean;
            data: {
                calculation: components["schemas"]["CalculationInstance"];
                files: {
                    checkpoint_exists: boolean;
                    parameters_file_exists: boolean;
                    results_file_exists: boolean;
                };
            };
        };
        CalculationUpdateResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @example Calculation renamed successfully. */
                message: string;
                /** @description Updated calculation name */
                name: string;
            };
        };
        CalculationDeleteResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @example Calculation deleted successfully */
                message: string;
                /** @description ID of deleted calculation */
                deleted_id: string;
            };
        };
        OrbitalInfo: {
            /** @description Orbital index (0-based) */
            index: number;
            /** @description Orbital energy in Hartree */
            energy_hartree: number;
            /** @description Orbital energy in eV */
            energy_ev: number;
            /** @description Orbital occupancy (0.0 for virtual, 1.0 or 2.0 for occupied) */
            occupancy: number;
            /**
             * @description Type of orbital
             * @enum {string}
             */
            orbital_type: "core" | "homo" | "lumo" | "virtual";
            /** @description Human-readable label (e.g., "HOMO", "LUMO", "HOMO-1", "LUMO+2") */
            label?: string;
        };
        OrbitalsResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description List of all molecular orbitals */
                orbitals: components["schemas"]["OrbitalInfo"][];
                /** @description Index of HOMO orbital */
                homo_index: number;
                /** @description Index of LUMO orbital */
                lumo_index: number;
                /** @description Total number of orbitals */
                total_orbitals: number;
                /** @description Number of occupied orbitals */
                num_occupied?: number;
                /** @description Number of virtual orbitals */
                num_virtual?: number;
            };
        };
        OrbitalCubeResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description CUBE file content as string */
                cube_data: string;
                orbital_info: components["schemas"]["OrbitalInfo"];
                generation_params: {
                    /** @description Grid size used for generation */
                    grid_size?: number;
                    /** @description Positive isovalue used */
                    isovalue_positive?: number;
                    /** @description Negative isovalue used */
                    isovalue_negative?: number;
                    /** @description Generated file size in KB */
                    file_size_kb?: number;
                };
                /** @description Path to saved CUBE file (if saved to disk) */
                file_path?: string | null;
                /** @description Whether the CUBE file was loaded from cache */
                cached?: boolean;
            };
        };
        CubeFilesListResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description ID of the calculation */
                calculation_id: string;
                /** @description List of CUBE files */
                cube_files: {
                    /** @description Name of the CUBE file */
                    filename: string;
                    /** @description Full path to the CUBE file */
                    file_path: string;
                    /** @description Index of the molecular orbital */
                    orbital_index: number;
                    /** @description Grid size used for generation */
                    grid_size: number;
                    /** @description File size in KB */
                    file_size_kb: number;
                    /**
                     * Format: date-time
                     * @description Last modified timestamp
                     */
                    modified: string;
                }[];
                /** @description Total number of CUBE files */
                total_files: number;
                /** @description Total size of all CUBE files in KB */
                total_size_kb: number;
            };
        };
        CubeFilesDeleteResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @description ID of the calculation */
                calculation_id: string;
                /** @description Orbital index that was deleted (if specific) */
                orbital_index?: number | null;
                /** @description Number of files deleted */
                deleted_files: number;
                /** @description Human-readable message about the deletion */
                message: string;
            };
        };
        SolventOption: {
            /** @description Solvent identifier value */
            value: string;
            /** @description Human-readable display name */
            display: string;
            /** @description Dielectric constant of the solvent */
            dielectric_constant: number;
        };
        SupportedParametersData: {
            /** @description Supported quantum calculation methods */
            calculation_methods: string[];
            /** @description Supported basis functions grouped by category (e.g., Minimal, Pople Style, etc.) */
            basis_functions: {
                [key: string]: string[];
            };
            /** @description Supported exchange-correlation functionals grouped by category (e.g., Hybrid, GGA, etc.) */
            exchange_correlation: {
                [key: string]: string[];
            };
            /** @description Supported solvent effect methods */
            solvent_methods: string[];
            /** @description Supported solvents grouped by category (e.g., Highly Polar, Protic, etc.) */
            solvents: {
                [key: string]: components["schemas"]["SolventOption"][];
            };
            /** @description Supported TDDFT calculation methods */
            tddft_methods: string[];
        };
        SupportedParametersResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["SupportedParametersData"];
        };
        AppSettings: {
            /**
             * @description Maximum number of parallel calculation instances
             * @example 4
             */
            max_parallel_instances: number;
            /**
             * @description Maximum CPU utilization percentage for the system
             * @example 95
             */
            max_cpu_utilization_percent: number;
            /**
             * @description Maximum memory utilization percentage for the system
             * @example 95
             */
            max_memory_utilization_percent: number;
            /**
             * @description Total number of CPU cores in the system (auto-detected)
             * @example 8
             */
            system_total_cores: number;
            /**
             * @description Total system memory in MB (auto-detected)
             * @example 16384
             */
            system_total_memory_mb: number;
        };
        SettingsResponse: {
            /** @example true */
            success: boolean;
            data: {
                settings: components["schemas"]["AppSettings"];
            };
        };
        SettingsUpdateRequest: components["schemas"]["AppSettings"];
        ErrorResponse: {
            /** @example false */
            success: boolean;
            /** @description Error message */
            error: string;
        };
        SystemResourceInfo: {
            /**
             * @description Total number of CPU cores
             * @example 8
             */
            total_cpu_cores: number;
            /**
             * @description Total system memory in MB
             * @example 16384
             */
            total_memory_mb: number;
            /**
             * @description Available system memory in MB
             * @example 8192
             */
            available_memory_mb: number;
            /**
             * @description Current CPU usage percentage
             * @example 25.5
             */
            cpu_usage_percent: number;
            /**
             * @description Current memory usage percentage
             * @example 50.2
             */
            memory_usage_percent: number;
            /**
             * Format: date-time
             * @description Timestamp when the resource info was collected
             */
            timestamp: string;
        };
        ResourceConstraints: {
            /**
             * @description Maximum CPU utilization percentage
             * @example 95
             */
            max_cpu_utilization_percent: number;
            /**
             * @description Maximum memory utilization percentage
             * @example 95
             */
            max_memory_utilization_percent: number;
            /**
             * @description Maximum allowed CPU cores for calculations
             * @example 6
             */
            max_allowed_cpu_cores: number;
            /**
             * @description Maximum allowed memory in MB for calculations
             * @example 13107
             */
            max_allowed_memory_mb: number;
        };
        AllocatedResources: {
            /**
             * @description Total CPU cores currently allocated to calculations
             * @example 4
             */
            total_allocated_cpu_cores: number;
            /**
             * @description Total memory in MB currently allocated to calculations
             * @example 8192
             */
            total_allocated_memory_mb: number;
            /**
             * @description Available CPU cores for new calculations
             * @example 2
             */
            available_cpu_cores: number;
            /**
             * @description Available memory in MB for new calculations
             * @example 4915
             */
            available_memory_mb: number;
            /**
             * @description Number of active calculations
             * @example 2
             */
            active_calculations_count: number;
        };
        SystemResourceSummary: {
            system_info: components["schemas"]["SystemResourceInfo"];
            resource_constraints: components["schemas"]["ResourceConstraints"];
            allocated_resources: components["schemas"]["AllocatedResources"];
        };
        SystemResourceResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["SystemResourceSummary"];
        };
        IRSpectrumResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["IRSpectrumData"];
        };
        IRSpectrumData: {
            /**
             * @description Unique calculation ID
             * @example calc_20240101_120000_abcd1234
             */
            calculation_id: string;
            spectrum: components["schemas"]["IRSpectrumDetails"];
            generation_info: components["schemas"]["IRGenerationInfo"];
        };
        IRSpectrumDetails: {
            /**
             * @description Wavenumber values (cm⁻¹) for the x-axis
             * @example [
             *       400,
             *       401,
             *       402
             *     ]
             */
            x_axis: number[];
            /**
             * @description Intensity values for the y-axis (arbitrary units)
             * @example [
             *       0,
             *       0.1,
             *       0.05
             *     ]
             */
            y_axis: number[];
            /** @description Individual peaks in the spectrum */
            peaks: components["schemas"]["IRPeak"][];
            metadata: components["schemas"]["IRSpectrumMetadata"];
        };
        IRPeak: {
            /**
             * Format: float
             * @description Peak frequency after scale factor correction (cm⁻¹)
             * @example 1654.2
             */
            frequency_cm: number;
            /**
             * Format: float
             * @description Peak intensity (arbitrary units)
             * @example 120.5
             */
            intensity: number;
            /**
             * Format: float
             * @description Original calculated frequency before scale factor correction (cm⁻¹)
             * @example 1723.1
             */
            original_frequency_cm: number;
        };
        IRSpectrumMetadata: {
            /**
             * @description Computational method used
             * @example B3LYP
             */
            method: string;
            /**
             * @description Basis set used
             * @example 6-31G*
             */
            basis_set: string;
            /**
             * Format: float
             * @description Scale factor applied to frequencies
             * @example 0.96
             */
            scale_factor: number;
            /**
             * @description Information about the scale factor source
             * @example Exact match found
             */
            scale_message: string;
            /**
             * Format: float
             * @description Full width at half maximum for Lorentzian broadening (cm⁻¹)
             * @example 100
             */
            broadening_fwhm_cm: number;
            /**
             * @description Frequency range for the spectrum [min, max] (cm⁻¹)
             * @example [
             *       400,
             *       4000
             *     ]
             */
            frequency_range_cm: number[];
            /**
             * @description Total number of calculated frequencies
             * @example 24
             */
            num_peaks_total: number;
            /**
             * @description Number of peaks within the specified range
             * @example 18
             */
            num_peaks_in_range: number;
            /**
             * @description Number of points in the spectrum
             * @example 3000
             */
            num_points: number;
        };
        IRGenerationInfo: {
            /**
             * Format: float
             * @description Full width at half maximum used for broadening (cm⁻¹)
             * @example 100
             */
            broadening_fwhm_cm: number;
            /**
             * @description Frequency range used [min, max] (cm⁻¹)
             * @example [
             *       400,
             *       4000
             *     ]
             */
            frequency_range_cm: number[];
            /**
             * @description Whether individual peaks were marked in the plot
             * @example true
             */
            peaks_marked: boolean;
            /**
             * Format: date-time
             * @description ISO timestamp when the spectrum was generated
             * @example 2024-01-01T12:00:00.000Z
             */
            generated_at: string;
        };
        NaturalOrbitalAnalysis: {
            /** @description Whether natural orbital analysis was performed */
            enabled?: boolean;
            /** @description Natural orbital occupation numbers */
            occupation_numbers?: number[] | null;
            /** @description Number of strongly occupied orbitals (occupation > 1.5) */
            strongly_occupied_count?: number;
            /** @description Number of weakly occupied orbitals (0.1 < occupation <= 1.5) */
            weakly_occupied_count?: number;
            /** @description Number of virtual orbitals (occupation <= 0.1) */
            virtual_count?: number;
            /** @description Total number of active space orbitals analyzed */
            total_orbitals?: number;
            /**
             * Format: float
             * @description Total number of electrons in active space
             */
            total_active_electrons?: number;
            /**
             * Format: float
             * @description Effective number of electron pairs
             */
            effective_electron_pairs?: number;
            /**
             * Format: float
             * @description Effective number of unpaired electrons
             */
            effective_unpaired_electrons?: number;
            /** @description Reason if analysis was not performed */
            reason?: string | null;
            /** @description Error message if analysis failed */
            error?: string | null;
        };
        CICoefficientAnalysis: {
            /** @description Whether CI coefficient analysis is available */
            available?: boolean;
            /** @description Total number of configurations */
            total_configurations?: number;
            /** @description Major configurations with significant contributions */
            major_configurations?: {
                /** @description Index of the configuration */
                configuration_index?: number;
                /**
                 * Format: float
                 * @description CI coefficient value
                 */
                coefficient?: number;
                /**
                 * Format: float
                 * @description Percentage contribution to the wavefunction
                 */
                contribution_percent?: number;
                /**
                 * Format: float
                 * @description Cumulative percentage contribution
                 */
                cumulative_percent?: number;
            }[];
            /**
             * Format: float
             * @description Leading CI coefficient (largest magnitude)
             */
            leading_coefficient?: number;
            /**
             * Format: float
             * @description Percentage contribution of the leading configuration
             */
            leading_contribution_percent?: number;
            /**
             * Format: float
             * @description Percentage multiconfigurational character (100 - leading contribution)
             */
            multiconfigurational_character?: number;
            /** @description Reason if analysis was not performed */
            reason?: string | null;
            /** @description Error message if analysis failed */
            error?: string | null;
        };
        MullikenSpinAnalysis: {
            /** @description Whether Mulliken spin analysis is available */
            available?: boolean;
            /** @description Spin density for each atom */
            atomic_spin_densities?: {
                /** @description 0-based index of the atom */
                atom_index?: number;
                /** @description Element symbol */
                element?: string;
                /**
                 * Format: float
                 * @description Atomic spin density (alpha - beta electrons)
                 */
                spin_density?: number;
                /**
                 * Format: float
                 * @description Absolute value of atomic spin density
                 */
                abs_spin_density?: number;
            }[];
            /**
             * Format: float
             * @description Total spin density of the molecule
             */
            total_spin_density?: number;
            /**
             * Format: float
             * @description Sum of absolute atomic spin densities
             */
            total_absolute_spin_density?: number;
            /**
             * Format: float
             * @description Expected spin (2S) from molecular parameters
             */
            expected_spin?: number;
            /** @description Reason if analysis was not performed */
            reason?: string | null;
            /** @description Error message if analysis failed */
            error?: string | null;
        };
        OrbitalOverlapAnalysis: {
            /** @description Whether orbital overlap analysis is available */
            available?: boolean;
            /** @description Number of active space orbitals analyzed */
            active_space_orbitals?: number;
            /** @description Analysis of each active space orbital */
            active_orbital_analysis?: {
                /** @description Index of active space orbital */
                active_orbital_index?: number;
                /** @description Index of dominant SCF orbital */
                dominant_scf_orbital?: number;
                /**
                 * Format: float
                 * @description Maximum overlap with SCF orbitals
                 */
                max_overlap?: number;
                /**
                 * @description Type of dominant SCF orbital
                 * @enum {string}
                 */
                scf_orbital_type?: "occupied" | "partially_occupied" | "virtual" | "unknown";
            }[];
            /**
             * Format: float
             * @description Average maximum overlap across active orbitals
             */
            average_max_overlap?: number;
            /**
             * @description Character of orbital transformation
             * @enum {string}
             */
            orbital_transformation_character?: "minimal" | "significant";
            /** @description Reason if analysis was not performed */
            reason?: string | null;
            /** @description Error message if analysis failed */
            error?: string | null;
        };
        OrbitalRotationAnalysis: {
            /** @description Whether orbital rotation analysis is available */
            available?: boolean;
            /**
             * Format: float
             * @description Maximum rotation magnitude for core orbitals
             */
            core_orbital_rotation_magnitude?: number;
            /**
             * Format: float
             * @description Maximum rotation magnitude for active orbitals
             */
            active_orbital_rotation_magnitude?: number;
            /**
             * Format: float
             * @description Maximum rotation magnitude for virtual orbitals
             */
            virtual_orbital_rotation_magnitude?: number;
            /**
             * Format: float
             * @description Overall maximum rotation magnitude
             */
            overall_rotation_magnitude?: number;
            /**
             * @description Extent of orbital rotation during CASSCF optimization
             * @enum {string}
             */
            rotation_extent?: "minimal" | "moderate" | "significant";
            /** @description Reason if analysis was not performed */
            reason?: string | null;
            /** @description Error message if analysis failed */
            error?: string | null;
        };
        EnhancedCIAnalysis: {
            /**
             * @description Source of CI analysis (from kernel return value)
             * @enum {string}
             */
            source?: "kernel_return";
            /** @description Whether enhanced CI analysis is available */
            available?: boolean;
            /** @description Total number of CI coefficients */
            total_coefficients?: number;
            /** @description Shape of the CI coefficient vector/matrix */
            ci_vector_shape?: string;
            /** @description Major configurations with >0.5% contribution */
            major_configurations?: {
                /** @description Index of the configuration */
                configuration_index?: number;
                /**
                 * Format: float
                 * @description CI coefficient value
                 */
                coefficient?: number;
                /**
                 * Format: float
                 * @description Percentage contribution to the wavefunction
                 */
                contribution_percent?: number;
                /**
                 * Format: float
                 * @description Cumulative percentage contribution
                 */
                cumulative_percent?: number;
            }[];
            /**
             * Format: float
             * @description Leading CI coefficient (largest magnitude)
             */
            leading_coefficient?: number;
            /**
             * Format: float
             * @description Percentage contribution of the leading configuration
             */
            leading_contribution_percent?: number;
            /**
             * Format: float
             * @description Multiconfigurational character (100 - leading contribution %)
             */
            multiconfigurational_character?: number;
            /** @description Number of configurations with significant contribution */
            effective_configurations?: number;
            /**
             * Format: float
             * @description Entropy measure of wavefunction multiconfigurational character
             */
            wavefunction_entropy?: number;
            /**
             * @description Overall character of the wavefunction
             * @enum {string}
             */
            wavefunction_character?: "single_configuration" | "few_configuration" | "multiconfigurational";
            /**
             * Format: float
             * @description Normalization of the CI vector
             */
            normalization?: number;
            /** @description Reason if analysis was not performed */
            reason?: string | null;
            /** @description Error message if analysis failed */
            error?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    searchPubChem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PubChemSearchRequest"];
            };
        };
        responses: {
            /** @description Compound found and XYZ generated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PubChemSearchResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Compound not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    convertSmiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SMILESConvertRequest"];
            };
        };
        responses: {
            /** @description SMILES converted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SMILESConvertResponse"];
                };
            };
            /** @description Invalid SMILES string */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    validateXYZ: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["XYZValidateRequest"];
            };
        };
        responses: {
            /** @description XYZ validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["XYZValidateResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    startCalculation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuantumCalculationRequest"];
            };
        };
        responses: {
            /** @description Calculation queued successfully */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StartCalculationResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to queue calculation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCalculations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of calculations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationListResponse"];
                };
            };
            /** @description Failed to list calculations */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCalculationDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Calculation details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationDetailsResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to get calculation details */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateCalculation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CalculationUpdateRequest"];
            };
        };
        responses: {
            /** @description Calculation updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationUpdateResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Name conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to update calculation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCalculation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Calculation deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalculationDeleteResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to delete calculation */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getOrbitals: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Molecular orbital information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrbitalsResponse"];
                };
            };
            /** @description Calculation not found or no orbital data available */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to get orbital information */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getOrbitalCube: {
        parameters: {
            query?: {
                /** @description Grid size for CUBE file generation (default 80) */
                gridSize?: number;
                /** @description Positive isovalue for orbital visualization (default 0.02) */
                isovaluePos?: number;
                /** @description Negative isovalue for orbital visualization (default -0.02) */
                isovalueNeg?: number;
            };
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
                /** @description Molecular orbital index */
                orbitalIndex: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Orbital CUBE file data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrbitalCubeResponse"];
                };
            };
            /** @description Calculation or orbital not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to generate orbital CUBE file */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCubeFiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CUBE files list retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CubeFilesListResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to retrieve CUBE files */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCubeFiles: {
        parameters: {
            query?: {
                /** @description Specific orbital index to delete (if not provided, deletes all) */
                orbital_index?: number;
            };
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CUBE files deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CubeFilesDeleteResponse"];
                };
            };
            /** @description Calculation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to delete CUBE files */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getIRSpectrum: {
        parameters: {
            query?: {
                /** @description Full width at half maximum for Lorentzian broadening in cm⁻¹ */
                broadening_fwhm?: number;
                /** @description Minimum wavenumber for spectrum range in cm⁻¹ */
                x_min?: number;
                /** @description Maximum wavenumber for spectrum range in cm⁻¹ */
                x_max?: number;
                /** @description Whether to mark individual peaks in the plot */
                show_peaks?: boolean;
            };
            header?: never;
            path: {
                /** @description Unique calculation ID */
                calculationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description IR spectrum generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IRSpectrumResponse"];
                };
            };
            /** @description Invalid parameters or calculation not completed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Calculation not found or no frequency data available */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to generate IR spectrum */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSupportedParameters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Supported parameters retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupportedParametersResponse"];
                };
            };
            /** @description Failed to retrieve supported parameters */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Settings retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsResponse"];
                };
            };
            /** @description Failed to retrieve settings */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingsUpdateRequest"];
            };
        };
        responses: {
            /** @description Settings updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsResponse"];
                };
            };
            /** @description Invalid settings data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Failed to update settings */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSystemResourceStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System resource status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemResourceResponse"];
                };
            };
            /** @description Failed to retrieve system resource status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
