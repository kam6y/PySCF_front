# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-09-27T08:13:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class SearchType(Enum):
    """
    Type of PubChem search
    """

    name = 'name'
    cid = 'cid'
    formula = 'formula'


class SolventMethod(Enum):
    """
    Solvent calculation method
    """

    none = 'none'
    ief_pcm = 'ief-pcm'
    c_pcm = 'c-pcm'
    cosmo = 'cosmo'
    ssvpe = 'ssvpe'
    ddcosmo = 'ddcosmo'


class CalculationMethod(Enum):
    """
    Quantum calculation method
    """

    DFT = 'DFT'
    HF = 'HF'
    MP2 = 'MP2'
    CCSD = 'CCSD'
    CCSD_T = 'CCSD_T'
    TDDFT = 'TDDFT'
    CASCI = 'CASCI'
    CASSCF = 'CASSCF'


class CalculationStatus(Enum):
    """
    Status of a calculation
    """

    pending = 'pending'
    running = 'running'
    completed = 'completed'
    error = 'error'
    waiting = 'waiting'


class PubChemSearchRequest(BaseModel):
    query: str = Field(..., description='Search query for PubChem', min_length=1)
    searchType: Optional[SearchType] = 'name'


class SMILESConvertRequest(BaseModel):
    smiles: str = Field(
        ..., description='SMILES string to convert to XYZ format', min_length=1
    )


class XYZValidateRequest(BaseModel):
    xyz: str = Field(..., description='XYZ string to validate', min_length=1)


class TddftMethod(Enum):
    """
    TDDFT calculation method - TDDFT or Tamm-Dancoff approximation
    """

    TDDFT = 'TDDFT'
    TDA = 'TDA'


class QuantumCalculationRequest(BaseModel):
    xyz: str = Field(..., description='XYZ molecular structure data', min_length=1)
    calculation_method: Optional[CalculationMethod] = 'DFT'
    basis_function: Optional[str] = Field(
        '6-31G(d)',
        description='Basis set for calculation (e.g., STO-3G, 6-31G(d), 6-31+G(d,p), cc-pVDZ, aug-cc-pVTZ, def2-SVP)',
    )
    exchange_correlation: Optional[str] = Field(
        'B3LYP',
        description='Exchange-correlation functional (e.g., B3LYP, PBE0, M06-2X, CAM-B3LYP, PBE, BLYP, M06, TPSS). Note - This parameter is ignored for HF method as Hartree-Fock calculations do not use exchange-correlation functionals.',
    )
    charges: Optional[int] = Field(0, description='Molecular charge', ge=-10, le=10)
    spin: Optional[int] = Field(
        0, description='Spin (2S), number of unpaired electrons', ge=0, le=10
    )
    solvent_method: Optional[SolventMethod] = 'none'
    solvent: Optional[str] = Field(
        '-',
        description='Solvent type or custom parameters. Options include:\n- Predefined solvents: water, dimethylsulfoxide, n,n-dimethylformamide, nitromethane, methanol, ethanol, acetone, dichloroethane, dichloromethane, tetrahydrofuran, chlorobenzene, chloroform, diethylether, toluene, benzene, 1,4-dioxane, cyclohexane\n- Custom dielectric constant (numeric value > 1.0)\n',
    )
    name: Optional[str] = Field(
        'Unnamed Calculation',
        description='Display name for the calculation instance (distinct from molecule_name which is the chemical name)',
        max_length=100,
        min_length=1,
    )
    cpu_cores: Optional[int] = Field(
        None, description='Number of CPU cores', ge=1, le=32
    )
    memory_mb: Optional[int] = Field(None, description='Memory in MB', ge=512, le=32768)
    tddft_nstates: Optional[int] = Field(
        10,
        description='Number of excited states to calculate (TDDFT only)',
        ge=1,
        le=50,
    )
    tddft_method: Optional[TddftMethod] = Field(
        'TDDFT',
        description='TDDFT calculation method - TDDFT or Tamm-Dancoff approximation',
    )
    tddft_analyze_nto: Optional[bool] = Field(
        False, description='Perform Natural Transition Orbital analysis (TDDFT only)'
    )
    ncas: Optional[int] = Field(
        4,
        description='Number of active space orbitals (CASCI/CASSCF only)',
        ge=1,
        le=50,
    )
    nelecas: Optional[int] = Field(
        4,
        description='Number of active space electrons (CASCI/CASSCF only)',
        ge=1,
        le=100,
    )
    max_cycle_macro: Optional[int] = Field(
        50, description='Maximum CASSCF macro iterations (CASSCF only)', ge=1, le=200
    )
    max_cycle_micro: Optional[int] = Field(
        3, description='Maximum CI solver micro iterations (CASCI/CASSCF)', ge=1, le=20
    )
    natorb: Optional[bool] = Field(
        True,
        description='Transform to natural orbitals in active space (CASCI/CASSCF only)',
    )
    conv_tol: Optional[float] = Field(
        1e-06,
        description='Energy convergence tolerance (CASSCF only)',
        ge=1e-12,
        le=0.001,
    )
    conv_tol_grad: Optional[float] = Field(
        0.0001,
        description='Gradient convergence tolerance (CASSCF only)',
        ge=1e-08,
        le=0.01,
    )
    optimize_geometry: Optional[bool] = Field(
        True,
        description='Whether to perform geometry optimization before the main calculation',
    )


class CalculationUpdateRequest(BaseModel):
    name: str = Field(
        ...,
        description='Updated name for the calculation',
        max_length=100,
        min_length=1,
    )


class HealthResponse(BaseModel):
    status: str = Field(..., examples=['ok'])
    service: str = Field(..., examples=['pyscf-front-api'])
    version: str = Field(..., examples=['0.3.0'])


class PubChemCompoundInfo(BaseModel):
    cid: int = Field(..., description='PubChem Compound ID')
    iupac_name: str = Field(..., description='IUPAC name')
    molecular_formula: str = Field(..., description='Molecular formula')
    molecular_weight: float = Field(..., description='Molecular weight')
    synonyms: List[str] = Field(..., description='List of synonyms')


class Data(BaseModel):
    xyz: str = Field(..., description='XYZ format molecular structure')
    compound_info: PubChemCompoundInfo
    atom_count: int = Field(..., description='Number of atoms in the molecule')


class PubChemSearchResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data


class Data1(BaseModel):
    xyz: str = Field(..., description='XYZ format molecular structure')


class SMILESConvertResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data1 = Field(..., title='SMILESConvertData')


class Atom(BaseModel):
    element: str = Field(..., description='Element symbol')
    x: float = Field(..., description='X coordinate')
    y: float = Field(..., description='Y coordinate')
    z: float = Field(..., description='Z coordinate')


class Data2(BaseModel):
    """
    Validation result
    """

    valid: bool = Field(..., description='Whether the XYZ format is valid')
    error: Optional[str] = Field(None, description='Error message if validation failed')
    num_atoms: Optional[int] = Field(
        None, description='Number of atoms in the molecule (if valid)'
    )
    title: Optional[str] = Field(
        None, description='Title line from XYZ file (if valid)'
    )
    atoms: Optional[List[Atom]] = Field(
        None, description='Array of atom data (if valid)'
    )


class XYZValidateResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data2 = Field(..., description='Validation result')


class CalculationParameters(BaseModel):
    calculation_method: CalculationMethod
    basis_function: str
    exchange_correlation: Optional[str] = Field(
        None,
        description='Exchange-correlation functional. Note - This parameter is ignored for HF method as Hartree-Fock calculations do not use exchange-correlation functionals.',
    )
    charges: int
    spin: int
    solvent_method: SolventMethod
    solvent: str
    xyz: str
    molecule_name: Optional[str] = Field(
        None,
        description='Chemical name of the molecule (distinct from calculation display name)',
    )
    cpu_cores: Optional[int] = None
    memory_mb: Optional[int] = None
    created_at: Optional[AwareDatetime] = None
    tddft_nstates: Optional[int] = Field(
        None, description='Number of excited states (TDDFT only)'
    )
    tddft_method: Optional[str] = Field(None, description='TDDFT method used')
    tddft_analyze_nto: Optional[bool] = Field(
        None, description='Whether NTO analysis was performed'
    )
    ncas: Optional[int] = Field(
        None, description='Number of active space orbitals (CASCI/CASSCF)'
    )
    nelecas: Optional[int] = Field(
        None, description='Number of active space electrons (CASCI/CASSCF)'
    )
    max_cycle_macro: Optional[int] = Field(
        None, description='Maximum CASSCF macro iterations'
    )
    max_cycle_micro: Optional[int] = Field(
        None, description='Maximum CI solver micro iterations'
    )
    natorb: Optional[bool] = Field(
        None, description='Whether natural orbital transformation was used'
    )
    conv_tol: Optional[float] = Field(
        None, description='Energy convergence tolerance used'
    )
    conv_tol_grad: Optional[float] = Field(
        None, description='Gradient convergence tolerance used'
    )


class TransitionDipole(BaseModel):
    x: Optional[float] = None
    y: Optional[float] = None
    z: Optional[float] = None


class MajorTransition(BaseModel):
    state: Optional[int] = Field(None, description='Excited state number')
    energy: Optional[float] = Field(None, description='Excitation energy in eV')
    wavelength: Optional[float] = Field(None, description='Wavelength in nm')
    oscillator_strength: Optional[float] = Field(
        None, description='Oscillator strength'
    )
    dominant_transition: Optional[str] = Field(
        None, description='Main orbital transition (e.g., HOMO -> LUMO)'
    )


class NtoPair(BaseModel):
    hole_orbital: Optional[str] = Field(
        None, description='Description of hole orbital (e.g., HOMO, HOMO-1)'
    )
    particle_orbital: Optional[str] = Field(
        None, description='Description of particle orbital (e.g., LUMO, LUMO+1)'
    )
    weight: Optional[float] = Field(None, description='NTO weight (singular value)')
    contribution: Optional[float] = Field(
        None, description='Percentage contribution to the transition'
    )
    hole_orbital_index: Optional[int] = Field(
        None, description='Index of the hole orbital'
    )
    particle_orbital_index: Optional[int] = Field(
        None, description='Index of the particle orbital'
    )


class NtoAnalysi(BaseModel):
    state: Optional[int] = Field(None, description='Excited state number (1-indexed)')
    energy: Optional[float] = Field(None, description='Excitation energy in eV')
    nto_pairs: Optional[List[NtoPair]] = Field(
        None, description='NTO orbital pairs for this excited state'
    )
    total_nto_pairs: Optional[int] = Field(
        None, description='Total number of NTO pairs analyzed'
    )


class MullikenCharge(BaseModel):
    atom_index: Optional[int] = Field(None, description='0-based index of the atom')
    element: Optional[str] = Field(
        None, description='Element symbol (e.g., C, H, O, N)'
    )
    charge: Optional[float] = Field(
        None,
        description='Mulliken charge on this atom (positive = electron deficient, negative = electron rich)',
    )


class KernelReturnInfo(BaseModel):
    """
    Information about kernel() return value structure
    """

    model_config = ConfigDict(
        extra='allow',
    )
    tuple_length: Optional[int] = Field(
        None, description='Number of elements in kernel() return tuple'
    )
    ci_coefficients_shape: Optional[str] = Field(
        None, description='Shape of CI coefficients array'
    )


class CalculationSummary(BaseModel):
    id: str = Field(..., description='Unique calculation ID')
    name: str = Field(..., description='Display name')
    path: str = Field(..., description='Directory path')
    date: str = Field(..., description='Date string')
    has_checkpoint: bool = Field(..., description='Whether checkpoint file exists')
    status: CalculationStatus


class Data4(BaseModel):
    base_directory: str = Field(..., description='Base directory for calculations')
    calculations: List[CalculationSummary]
    count: int = Field(..., description='Number of calculations')


class CalculationListResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data4


class Files(BaseModel):
    checkpoint_exists: bool
    parameters_file_exists: bool
    results_file_exists: bool


class Data6(BaseModel):
    message: str = Field(..., examples=['Calculation renamed successfully.'])
    name: str = Field(..., description='Updated calculation name')


class CalculationUpdateResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data6


class Data7(BaseModel):
    message: str = Field(..., examples=['Calculation deleted successfully'])
    deleted_id: str = Field(..., description='ID of deleted calculation')


class CalculationDeleteResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data7


class OrbitalType(Enum):
    """
    Type of orbital
    """

    core = 'core'
    homo = 'homo'
    lumo = 'lumo'
    virtual = 'virtual'


class OrbitalInfo(BaseModel):
    index: int = Field(..., description='Orbital index (0-based)')
    energy_hartree: float = Field(..., description='Orbital energy in Hartree')
    energy_ev: float = Field(..., description='Orbital energy in eV')
    occupancy: float = Field(
        ..., description='Orbital occupancy (0.0 for virtual, 1.0 or 2.0 for occupied)'
    )
    orbital_type: OrbitalType = Field(..., description='Type of orbital')
    label: Optional[str] = Field(
        None,
        description='Human-readable label (e.g., "HOMO", "LUMO", "HOMO-1", "LUMO+2")',
    )


class Data8(BaseModel):
    orbitals: List[OrbitalInfo] = Field(
        ..., description='List of all molecular orbitals'
    )
    homo_index: int = Field(..., description='Index of HOMO orbital')
    lumo_index: int = Field(..., description='Index of LUMO orbital')
    total_orbitals: int = Field(..., description='Total number of orbitals')
    num_occupied: Optional[int] = Field(None, description='Number of occupied orbitals')
    num_virtual: Optional[int] = Field(None, description='Number of virtual orbitals')


class OrbitalsResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data8


class GenerationParams(BaseModel):
    grid_size: Optional[int] = Field(None, description='Grid size used for generation')
    isovalue_positive: Optional[float] = Field(
        None, description='Positive isovalue used'
    )
    isovalue_negative: Optional[float] = Field(
        None, description='Negative isovalue used'
    )
    file_size_kb: Optional[float] = Field(None, description='Generated file size in KB')


class Data9(BaseModel):
    cube_data: str = Field(..., description='CUBE file content as string')
    orbital_info: OrbitalInfo
    generation_params: GenerationParams
    file_path: Optional[str] = Field(
        None, description='Path to saved CUBE file (if saved to disk)'
    )
    cached: Optional[bool] = Field(
        None, description='Whether the CUBE file was loaded from cache'
    )


class OrbitalCubeResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data9


class CubeFile(BaseModel):
    filename: str = Field(..., description='Name of the CUBE file')
    file_path: str = Field(..., description='Full path to the CUBE file')
    orbital_index: int = Field(..., description='Index of the molecular orbital')
    grid_size: int = Field(..., description='Grid size used for generation')
    file_size_kb: float = Field(..., description='File size in KB')
    modified: AwareDatetime = Field(..., description='Last modified timestamp')


class Data10(BaseModel):
    calculation_id: str = Field(..., description='ID of the calculation')
    cube_files: List[CubeFile] = Field(..., description='List of CUBE files')
    total_files: int = Field(..., description='Total number of CUBE files')
    total_size_kb: float = Field(..., description='Total size of all CUBE files in KB')


class CubeFilesListResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data10


class Data11(BaseModel):
    calculation_id: str = Field(..., description='ID of the calculation')
    orbital_index: Optional[int] = Field(
        None, description='Orbital index that was deleted (if specific)'
    )
    deleted_files: int = Field(..., description='Number of files deleted')
    message: str = Field(..., description='Human-readable message about the deletion')


class CubeFilesDeleteResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data11


class SolventOption(BaseModel):
    value: str = Field(..., description='Solvent identifier value')
    display: str = Field(..., description='Human-readable display name')
    dielectric_constant: float = Field(
        ..., description='Dielectric constant of the solvent'
    )


class SupportedParametersData(BaseModel):
    calculation_methods: List[str] = Field(
        ..., description='Supported quantum calculation methods'
    )
    basis_functions: Dict[str, List[str]] = Field(
        ...,
        description='Supported basis functions grouped by category (e.g., Minimal, Pople Style, etc.)',
    )
    exchange_correlation: Dict[str, List[str]] = Field(
        ...,
        description='Supported exchange-correlation functionals grouped by category (e.g., Hybrid, GGA, etc.)',
    )
    solvent_methods: List[str] = Field(
        ..., description='Supported solvent effect methods'
    )
    solvents: Dict[str, List[SolventOption]] = Field(
        ...,
        description='Supported solvents grouped by category (e.g., Highly Polar, Protic, etc.)',
    )
    tddft_methods: List[str] = Field(
        ..., description='Supported TDDFT calculation methods'
    )


class SupportedParametersResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: SupportedParametersData


class AppSettings(BaseModel):
    max_parallel_instances: int = Field(
        ...,
        description='Maximum number of parallel calculation instances',
        examples=[4],
        ge=1,
        le=32,
    )
    max_cpu_utilization_percent: float = Field(
        ...,
        description='Maximum CPU utilization percentage for the system',
        examples=[95.0],
        ge=10.0,
        le=100.0,
    )
    max_memory_utilization_percent: float = Field(
        ...,
        description='Maximum memory utilization percentage for the system',
        examples=[95.0],
        ge=10.0,
        le=100.0,
    )
    system_total_cores: int = Field(
        ...,
        description='Total number of CPU cores in the system (auto-detected)',
        examples=[8],
        ge=1,
    )
    system_total_memory_mb: int = Field(
        ...,
        description='Total system memory in MB (auto-detected)',
        examples=[16384],
        ge=1,
    )
    gemini_api_key: Optional[str] = Field(
        None,
        description='Google Gemini API key for AI agent functionality. If not provided, agent will use fallback responses.',
        examples=[None],
    )


class Data12(BaseModel):
    settings: AppSettings


class SettingsResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data12


class SettingsUpdateRequest(RootModel[AppSettings]):
    root: AppSettings


class ErrorResponse(BaseModel):
    success: bool = Field(..., examples=[False])
    error: str = Field(..., description='Error message')


class SystemResourceInfo(BaseModel):
    total_cpu_cores: int = Field(
        ..., description='Total number of CPU cores', examples=[8], ge=1
    )
    total_memory_mb: int = Field(
        ..., description='Total system memory in MB', examples=[16384], ge=1
    )
    available_memory_mb: int = Field(
        ..., description='Available system memory in MB', examples=[8192], ge=0
    )
    cpu_usage_percent: float = Field(
        ...,
        description='Current CPU usage percentage',
        examples=[25.5],
        ge=0.0,
        le=100.0,
    )
    memory_usage_percent: float = Field(
        ...,
        description='Current memory usage percentage',
        examples=[50.2],
        ge=0.0,
        le=100.0,
    )
    timestamp: AwareDatetime = Field(
        ..., description='Timestamp when the resource info was collected'
    )


class ResourceConstraints(BaseModel):
    max_cpu_utilization_percent: float = Field(
        ...,
        description='Maximum CPU utilization percentage',
        examples=[95.0],
        ge=10.0,
        le=100.0,
    )
    max_memory_utilization_percent: float = Field(
        ...,
        description='Maximum memory utilization percentage',
        examples=[95.0],
        ge=10.0,
        le=100.0,
    )
    max_allowed_cpu_cores: int = Field(
        ...,
        description='Maximum allowed CPU cores for calculations',
        examples=[6],
        ge=1,
    )
    max_allowed_memory_mb: int = Field(
        ...,
        description='Maximum allowed memory in MB for calculations',
        examples=[13107],
        ge=1,
    )


class AllocatedResources(BaseModel):
    total_allocated_cpu_cores: int = Field(
        ...,
        description='Total CPU cores currently allocated to calculations',
        examples=[4],
        ge=0,
    )
    total_allocated_memory_mb: int = Field(
        ...,
        description='Total memory in MB currently allocated to calculations',
        examples=[8192],
        ge=0,
    )
    available_cpu_cores: int = Field(
        ..., description='Available CPU cores for new calculations', examples=[2], ge=0
    )
    available_memory_mb: int = Field(
        ...,
        description='Available memory in MB for new calculations',
        examples=[4915],
        ge=0,
    )
    active_calculations_count: int = Field(
        ..., description='Number of active calculations', examples=[2], ge=0
    )


class SystemResourceSummary(BaseModel):
    system_info: SystemResourceInfo
    resource_constraints: ResourceConstraints
    allocated_resources: AllocatedResources


class SystemResourceResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: SystemResourceSummary


class IRPeak(BaseModel):
    frequency_cm: float = Field(
        ...,
        description='Peak frequency after scale factor correction (cm⁻¹)',
        examples=[1654.2],
    )
    intensity: float = Field(
        ..., description='Peak intensity (arbitrary units)', examples=[120.5]
    )
    original_frequency_cm: float = Field(
        ...,
        description='Original calculated frequency before scale factor correction (cm⁻¹)',
        examples=[1723.1],
    )


class IRSpectrumMetadata(BaseModel):
    method: str = Field(
        ..., description='Computational method used', examples=['B3LYP']
    )
    basis_set: str = Field(..., description='Basis set used', examples=['6-31G*'])
    scale_factor: float = Field(
        ..., description='Scale factor applied to frequencies', examples=[0.96]
    )
    scale_message: str = Field(
        ...,
        description='Information about the scale factor source',
        examples=['Exact match found'],
    )
    broadening_fwhm_cm: float = Field(
        ...,
        description='Full width at half maximum for Lorentzian broadening (cm⁻¹)',
        examples=[100.0],
    )
    frequency_range_cm: List[float] = Field(
        ...,
        description='Frequency range for the spectrum [min, max] (cm⁻¹)',
        examples=[[400.0, 4000.0]],
        max_length=2,
        min_length=2,
    )
    num_peaks_total: int = Field(
        ..., description='Total number of calculated frequencies', examples=[24]
    )
    num_peaks_in_range: int = Field(
        ..., description='Number of peaks within the specified range', examples=[18]
    )
    num_points: int = Field(
        ..., description='Number of points in the spectrum', examples=[3000]
    )


class IRGenerationInfo(BaseModel):
    broadening_fwhm_cm: float = Field(
        ...,
        description='Full width at half maximum used for broadening (cm⁻¹)',
        examples=[100.0],
    )
    frequency_range_cm: List[float] = Field(
        ...,
        description='Frequency range used [min, max] (cm⁻¹)',
        examples=[[400.0, 4000.0]],
        max_length=2,
        min_length=2,
    )
    peaks_marked: bool = Field(
        ...,
        description='Whether individual peaks were marked in the plot',
        examples=[True],
    )
    generated_at: AwareDatetime = Field(
        ...,
        description='ISO timestamp when the spectrum was generated',
        examples=['2024-01-01T12:00:00.000Z'],
    )


class NaturalOrbitalAnalysis(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Whether natural orbital analysis was performed'
    )
    occupation_numbers: Optional[List[float]] = Field(
        None, description='Natural orbital occupation numbers'
    )
    strongly_occupied_count: Optional[int] = Field(
        None, description='Number of strongly occupied orbitals (occupation > 1.5)'
    )
    weakly_occupied_count: Optional[int] = Field(
        None, description='Number of weakly occupied orbitals (0.1 < occupation <= 1.5)'
    )
    virtual_count: Optional[int] = Field(
        None, description='Number of virtual orbitals (occupation <= 0.1)'
    )
    total_orbitals: Optional[int] = Field(
        None, description='Total number of active space orbitals analyzed'
    )
    total_active_electrons: Optional[float] = Field(
        None, description='Total number of electrons in active space'
    )
    effective_electron_pairs: Optional[float] = Field(
        None, description='Effective number of electron pairs'
    )
    effective_unpaired_electrons: Optional[float] = Field(
        None, description='Effective number of unpaired electrons'
    )
    reason: Optional[str] = Field(
        None, description='Reason if analysis was not performed'
    )
    error: Optional[str] = Field(None, description='Error message if analysis failed')


class MajorConfiguration(BaseModel):
    configuration_index: Optional[int] = Field(
        None, description='Index of the configuration'
    )
    coefficient: Optional[float] = Field(None, description='CI coefficient value')
    contribution_percent: Optional[float] = Field(
        None, description='Percentage contribution to the wavefunction'
    )
    cumulative_percent: Optional[float] = Field(
        None, description='Cumulative percentage contribution'
    )


class CICoefficientAnalysis(BaseModel):
    available: Optional[bool] = Field(
        None, description='Whether CI coefficient analysis is available'
    )
    total_configurations: Optional[int] = Field(
        None, description='Total number of configurations'
    )
    major_configurations: Optional[List[MajorConfiguration]] = Field(
        None, description='Major configurations with significant contributions'
    )
    leading_coefficient: Optional[float] = Field(
        None, description='Leading CI coefficient (largest magnitude)'
    )
    leading_contribution_percent: Optional[float] = Field(
        None, description='Percentage contribution of the leading configuration'
    )
    multiconfigurational_character: Optional[float] = Field(
        None,
        description='Percentage multiconfigurational character (100 - leading contribution)',
    )
    reason: Optional[str] = Field(
        None, description='Reason if analysis was not performed'
    )
    error: Optional[str] = Field(None, description='Error message if analysis failed')


class AtomicSpinDensity(BaseModel):
    atom_index: Optional[int] = Field(None, description='0-based index of the atom')
    element: Optional[str] = Field(None, description='Element symbol')
    spin_density: Optional[float] = Field(
        None, description='Atomic spin density (alpha - beta electrons)'
    )
    abs_spin_density: Optional[float] = Field(
        None, description='Absolute value of atomic spin density'
    )


class MullikenSpinAnalysis(BaseModel):
    available: Optional[bool] = Field(
        None, description='Whether Mulliken spin analysis is available'
    )
    atomic_spin_densities: Optional[List[AtomicSpinDensity]] = Field(
        None, description='Spin density for each atom'
    )
    total_spin_density: Optional[float] = Field(
        None, description='Total spin density of the molecule'
    )
    total_absolute_spin_density: Optional[float] = Field(
        None, description='Sum of absolute atomic spin densities'
    )
    expected_spin: Optional[float] = Field(
        None, description='Expected spin (2S) from molecular parameters'
    )
    reason: Optional[str] = Field(
        None, description='Reason if analysis was not performed'
    )
    error: Optional[str] = Field(None, description='Error message if analysis failed')


class ScfOrbitalType(Enum):
    """
    Type of dominant SCF orbital
    """

    occupied = 'occupied'
    partially_occupied = 'partially_occupied'
    virtual = 'virtual'
    unknown = 'unknown'


class ActiveOrbitalAnalysi(BaseModel):
    active_orbital_index: Optional[int] = Field(
        None, description='Index of active space orbital'
    )
    dominant_scf_orbital: Optional[int] = Field(
        None, description='Index of dominant SCF orbital'
    )
    max_overlap: Optional[float] = Field(
        None, description='Maximum overlap with SCF orbitals'
    )
    scf_orbital_type: Optional[ScfOrbitalType] = Field(
        None, description='Type of dominant SCF orbital'
    )


class OrbitalTransformationCharacter(Enum):
    """
    Character of orbital transformation
    """

    minimal = 'minimal'
    significant = 'significant'


class OrbitalOverlapAnalysis(BaseModel):
    available: Optional[bool] = Field(
        None, description='Whether orbital overlap analysis is available'
    )
    active_space_orbitals: Optional[int] = Field(
        None, description='Number of active space orbitals analyzed'
    )
    active_orbital_analysis: Optional[List[ActiveOrbitalAnalysi]] = Field(
        None, description='Analysis of each active space orbital'
    )
    average_max_overlap: Optional[float] = Field(
        None, description='Average maximum overlap across active orbitals'
    )
    orbital_transformation_character: Optional[OrbitalTransformationCharacter] = Field(
        None, description='Character of orbital transformation'
    )
    reason: Optional[str] = Field(
        None, description='Reason if analysis was not performed'
    )
    error: Optional[str] = Field(None, description='Error message if analysis failed')


class RotationExtent(Enum):
    """
    Extent of orbital rotation during CASSCF optimization
    """

    minimal = 'minimal'
    moderate = 'moderate'
    significant = 'significant'


class OrbitalRotationAnalysis(BaseModel):
    available: Optional[bool] = Field(
        None, description='Whether orbital rotation analysis is available'
    )
    core_orbital_rotation_magnitude: Optional[float] = Field(
        None, description='Maximum rotation magnitude for core orbitals'
    )
    active_orbital_rotation_magnitude: Optional[float] = Field(
        None, description='Maximum rotation magnitude for active orbitals'
    )
    virtual_orbital_rotation_magnitude: Optional[float] = Field(
        None, description='Maximum rotation magnitude for virtual orbitals'
    )
    overall_rotation_magnitude: Optional[float] = Field(
        None, description='Overall maximum rotation magnitude'
    )
    rotation_extent: Optional[RotationExtent] = Field(
        None, description='Extent of orbital rotation during CASSCF optimization'
    )
    reason: Optional[str] = Field(
        None, description='Reason if analysis was not performed'
    )
    error: Optional[str] = Field(None, description='Error message if analysis failed')


class Source(Enum):
    """
    Source of CI analysis (from kernel return value)
    """

    kernel_return = 'kernel_return'


class WavefunctionCharacter(Enum):
    """
    Overall character of the wavefunction
    """

    single_configuration = 'single_configuration'
    few_configuration = 'few_configuration'
    multiconfigurational = 'multiconfigurational'


class EnhancedCIAnalysis(BaseModel):
    source: Optional[Source] = Field(
        None, description='Source of CI analysis (from kernel return value)'
    )
    available: Optional[bool] = Field(
        None, description='Whether enhanced CI analysis is available'
    )
    total_coefficients: Optional[int] = Field(
        None, description='Total number of CI coefficients'
    )
    ci_vector_shape: Optional[str] = Field(
        None, description='Shape of the CI coefficient vector/matrix'
    )
    major_configurations: Optional[List[MajorConfiguration]] = Field(
        None, description='Major configurations with >0.5% contribution'
    )
    leading_coefficient: Optional[float] = Field(
        None, description='Leading CI coefficient (largest magnitude)'
    )
    leading_contribution_percent: Optional[float] = Field(
        None, description='Percentage contribution of the leading configuration'
    )
    multiconfigurational_character: Optional[float] = Field(
        None,
        description='Multiconfigurational character (100 - leading contribution %)',
    )
    effective_configurations: Optional[int] = Field(
        None, description='Number of configurations with significant contribution'
    )
    wavefunction_entropy: Optional[float] = Field(
        None,
        description='Entropy measure of wavefunction multiconfigurational character',
    )
    wavefunction_character: Optional[WavefunctionCharacter] = Field(
        None, description='Overall character of the wavefunction'
    )
    normalization: Optional[float] = Field(
        None, description='Normalization of the CI vector'
    )
    reason: Optional[str] = Field(
        None, description='Reason if analysis was not performed'
    )
    error: Optional[str] = Field(None, description='Error message if analysis failed')


class Role(Enum):
    user = 'user'
    model = 'model'


class Part(BaseModel):
    text: Optional[str] = None


class HistoryItem(BaseModel):
    role: Optional[Role] = None
    parts: Optional[List[Part]] = None


class AgentChatRequest(BaseModel):
    message: str = Field(..., description='New message from the user')
    history: List[HistoryItem] = Field(..., description='Previous conversation history')


class Data13(BaseModel):
    reply: str = Field(..., description='Response message from the AI agent')


class AgentChatResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data13


class CalculationResults(BaseModel):
    scf_energy: Optional[float] = Field(None, description='SCF energy result')
    converged: Optional[bool] = Field(None, description='Whether calculation converged')
    homo_index: Optional[int] = Field(None, description='HOMO orbital index')
    lumo_index: Optional[int] = Field(None, description='LUMO orbital index')
    num_occupied_orbitals: Optional[int] = Field(
        None, description='Number of occupied orbitals'
    )
    num_virtual_orbitals: Optional[int] = Field(
        None, description='Number of virtual orbitals'
    )
    checkpoint_file: Optional[str] = Field(None, description='Path to checkpoint file')
    checkpoint_exists: Optional[bool] = Field(
        None, description='Whether checkpoint file exists'
    )
    working_directory: Optional[str] = Field(None, description='Working directory path')
    optimized_geometry: Optional[str] = Field(
        None, description='Optimized molecular geometry'
    )
    basis: Optional[str] = Field(None, description='Basis set used')
    xc_functional: Optional[str] = Field(
        None, description='Exchange-correlation functional used'
    )
    charge: Optional[float] = Field(None, description='Molecular charge')
    spin: Optional[int] = Field(
        None, description='Spin (2S), number of unpaired electrons'
    )
    max_cycle: Optional[int] = Field(None, description='Maximum SCF cycles')
    atom_count: Optional[int] = Field(None, description='Number of atoms')
    error: Optional[str] = Field(
        None, description='Error message if calculation failed'
    )
    excitation_energies: Optional[List[float]] = Field(
        None, description='Excitation energies in eV (TDDFT only)'
    )
    excitation_wavelengths: Optional[List[float]] = Field(
        None, description='Excitation wavelengths in nm (TDDFT only)'
    )
    oscillator_strengths: Optional[List[float]] = Field(
        None, description='Oscillator strengths for transitions (TDDFT only)'
    )
    transition_dipoles: Optional[List[TransitionDipole]] = Field(
        None, description='Transition dipole moments (TDDFT only)'
    )
    major_transitions: Optional[List[MajorTransition]] = Field(
        None, description='Major orbital transitions (TDDFT only)'
    )
    nto_analysis: Optional[List[NtoAnalysi]] = Field(
        None, description='Natural Transition Orbital analysis results (TDDFT only)'
    )
    mulliken_charges: Optional[List[MullikenCharge]] = Field(
        None, description='Mulliken population analysis charges for each atom'
    )
    frequency_analysis_performed: Optional[bool] = Field(
        None, description='Whether vibrational frequency analysis was performed'
    )
    vibrational_frequencies: Optional[List[float]] = Field(
        None,
        description='Vibrational frequencies in cm⁻¹ (positive frequencies only, excluding low-frequency modes)',
    )
    imaginary_frequencies_count: Optional[int] = Field(
        None,
        description='Number of imaginary frequencies (negative eigenvalues) - indicates optimization quality',
    )
    zero_point_energy: Optional[float] = Field(
        None, description='Zero-point vibrational energy in Hartree'
    )
    thermal_energy_298K: Optional[float] = Field(
        None, description='Thermal energy at 298.15 K in Hartree'
    )
    entropy_298K: Optional[float] = Field(
        None, description='Entropy at 298.15 K in Hartree/K'
    )
    gibbs_free_energy_298K: Optional[float] = Field(
        None, description='Gibbs free energy at 298.15 K in Hartree'
    )
    heat_capacity_298K: Optional[float] = Field(
        None, description='Heat capacity at 298.15 K in Hartree/K'
    )
    casci_energy: Optional[float] = Field(
        None, description='CASCI energy in Hartree (CASCI only)'
    )
    casscf_energy: Optional[float] = Field(
        None, description='CASSCF energy in Hartree (CASSCF only)'
    )
    correlation_energy: Optional[float] = Field(
        None, description='Correlation energy (CASCI/CASSCF - SCF) in Hartree'
    )
    macro_iterations: Optional[int] = Field(
        None, description='Number of CASSCF macro iterations performed'
    )
    natural_orbital_analysis: Optional[NaturalOrbitalAnalysis] = Field(
        None, description='Natural orbital analysis results (CASCI/CASSCF)'
    )
    ci_coefficient_analysis: Optional[CICoefficientAnalysis] = Field(
        None, description='CI coefficient analysis results (CASCI/CASSCF)'
    )
    mulliken_spin_analysis: Optional[MullikenSpinAnalysis] = Field(
        None,
        description='Mulliken atomic spin density analysis (CASCI/CASSCF open-shell)',
    )
    orbital_overlap_analysis: Optional[OrbitalOverlapAnalysis] = Field(
        None,
        description='Orbital overlap analysis between SCF and CASCI/CASSCF orbitals',
    )
    orbital_rotation_analysis: Optional[OrbitalRotationAnalysis] = Field(
        None,
        description='Orbital rotation analysis during CASSCF optimization (CASSCF only)',
    )
    kernel_return_info: Optional[KernelReturnInfo] = Field(
        None, description='Information about kernel() return value structure'
    )
    ci_coefficients_available: Optional[bool] = Field(
        None, description='Whether CI coefficients are available from kernel() return'
    )
    enhanced_ci_analysis: Optional[EnhancedCIAnalysis] = Field(
        None, description='Enhanced CI coefficient analysis from kernel() return'
    )


class CalculationInstance(BaseModel):
    id: str = Field(..., description='Unique calculation ID')
    name: str = Field(..., description='Display name for the calculation')
    status: CalculationStatus
    createdAt: AwareDatetime = Field(..., description='Creation timestamp')
    updatedAt: AwareDatetime = Field(..., description='Last update timestamp')
    parameters: CalculationParameters
    results: Optional[CalculationResults] = None
    workingDirectory: Optional[str] = Field(
        None, description='Path to calculation files'
    )
    error: Optional[str] = Field(None, description='Error details if status is error')
    waitingReason: Optional[str] = Field(
        None, description='Reason why calculation is waiting (if status is waiting)'
    )


class Data3(BaseModel):
    calculation: CalculationInstance


class StartCalculationResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data3


class Data5(BaseModel):
    calculation: CalculationInstance
    files: Files


class CalculationDetailsResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data5


class IRSpectrumDetails(BaseModel):
    x_axis: List[float] = Field(
        ...,
        description='Wavenumber values (cm⁻¹) for the x-axis',
        examples=[[400.0, 401.0, 402.0]],
    )
    y_axis: List[float] = Field(
        ...,
        description='Intensity values for the y-axis (arbitrary units)',
        examples=[[0.0, 0.1, 0.05]],
    )
    peaks: List[IRPeak] = Field(..., description='Individual peaks in the spectrum')
    metadata: IRSpectrumMetadata


class IRSpectrumData(BaseModel):
    calculation_id: str = Field(
        ...,
        description='Unique calculation ID',
        examples=['calc_20240101_120000_abcd1234'],
    )
    spectrum: IRSpectrumDetails
    generation_info: IRGenerationInfo


class IRSpectrumResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: IRSpectrumData
