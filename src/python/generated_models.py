# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-08-12T03:31:53+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class SearchType(Enum):
    """
    Type of PubChem search
    """

    name = 'name'
    cid = 'cid'
    formula = 'formula'


class SolventMethod(Enum):
    """
    Solvent calculation method
    """

    none = 'none'
    ief_pcm = 'ief-pcm'
    c_pcm = 'c-pcm'
    cosmo = 'cosmo'
    ssvpe = 'ssvpe'
    ddcosmo = 'ddcosmo'


class CalculationMethod(Enum):
    """
    Quantum calculation method
    """

    DFT = 'DFT'


class CalculationStatus(Enum):
    """
    Status of a calculation
    """

    pending = 'pending'
    running = 'running'
    completed = 'completed'
    error = 'error'


class PubChemSearchRequest(BaseModel):
    query: str = Field(..., description='Search query for PubChem', min_length=1)
    search_type: Optional[SearchType] = 'name'


class SMILESConvertRequest(BaseModel):
    smiles: str = Field(
        ..., description='SMILES string to convert to XYZ format', min_length=1
    )


class XYZValidateRequest(BaseModel):
    xyz: str = Field(..., description='XYZ string to validate', min_length=1)


class QuantumCalculationRequest(BaseModel):
    xyz: str = Field(..., description='XYZ molecular structure data', min_length=1)
    calculation_method: Optional[CalculationMethod] = 'DFT'
    basis_function: Optional[str] = Field(
        '6-31G(d)',
        description='Basis set for calculation (e.g., STO-3G, 6-31G(d), 6-31+G(d,p), cc-pVDZ, aug-cc-pVTZ, def2-SVP)',
    )
    exchange_correlation: Optional[str] = Field(
        'B3LYP',
        description='Exchange-correlation functional (e.g., B3LYP, PBE0, M06-2X, CAM-B3LYP, PBE, BLYP, M06, TPSS)',
    )
    charges: Optional[int] = Field(0, description='Molecular charge', ge=-10, le=10)
    spin_multiplicity: Optional[int] = Field(
        1, description='Spin multiplicity', ge=1, le=10
    )
    solvent_method: Optional[SolventMethod] = 'none'
    solvent: Optional[str] = Field(
        '-',
        description='Solvent type or custom parameters. Options include:\n- Predefined solvents: water, dimethylsulfoxide, n,n-dimethylformamide, nitromethane, methanol, ethanol, acetone, dichloroethane, dichloromethane, tetrahydrofuran, chlorobenzene, chloroform, diethylether, toluene, benzene, 1,4-dioxane, cyclohexane\n- Custom dielectric constant (numeric value > 1.0)\n',
    )
    name: Optional[str] = Field(
        'Unnamed Calculation',
        description='Name for the calculation',
        max_length=100,
        min_length=1,
    )
    cpu_cores: Optional[int] = Field(
        None, description='Number of CPU cores', ge=1, le=32
    )
    memory_mb: Optional[int] = Field(None, description='Memory in MB', ge=512, le=32768)


class CalculationUpdateRequest(BaseModel):
    name: str = Field(
        ...,
        description='Updated name for the calculation',
        max_length=100,
        min_length=1,
    )


class HealthResponse(BaseModel):
    status: str = Field(..., examples=['ok'])
    service: str = Field(..., examples=['pyscf-front-api'])
    version: str = Field(..., examples=['0.3.0'])


class PubChemCompoundInfo(BaseModel):
    cid: int = Field(..., description='PubChem Compound ID')
    iupac_name: str = Field(..., description='IUPAC name')
    molecular_formula: str = Field(..., description='Molecular formula')
    molecular_weight: float = Field(..., description='Molecular weight')
    synonyms: List[str] = Field(..., description='List of synonyms')


class Data(BaseModel):
    xyz: str = Field(..., description='XYZ format molecular structure')
    compound_info: PubChemCompoundInfo
    atom_count: int = Field(..., description='Number of atoms in the molecule')


class PubChemSearchResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data


class Data1(BaseModel):
    xyz: str = Field(..., description='XYZ format molecular structure')


class SMILESConvertResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data1


class Atom(BaseModel):
    element: str = Field(..., description='Element symbol')
    x: float = Field(..., description='X coordinate')
    y: float = Field(..., description='Y coordinate')
    z: float = Field(..., description='Z coordinate')


class Data2(BaseModel):
    """
    Validation result
    """

    valid: bool = Field(..., description='Whether the XYZ format is valid')
    error: Optional[str] = Field(None, description='Error message if validation failed')
    num_atoms: Optional[int] = Field(
        None, description='Number of atoms in the molecule (if valid)'
    )
    title: Optional[str] = Field(
        None, description='Title line from XYZ file (if valid)'
    )
    atoms: Optional[List[Atom]] = Field(
        None, description='Array of atom data (if valid)'
    )


class XYZValidateResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data2 = Field(..., description='Validation result')


class CalculationParameters(BaseModel):
    calculation_method: CalculationMethod
    basis_function: str
    exchange_correlation: str
    charges: int
    spin_multiplicity: int
    solvent_method: SolventMethod
    solvent: str
    xyz: str
    molecule_name: Optional[str] = None
    cpu_cores: Optional[int] = None
    memory_mb: Optional[int] = None
    created_at: Optional[datetime] = None


class CalculationResults(BaseModel):
    scf_energy: Optional[float] = Field(None, description='SCF energy result')
    converged: Optional[bool] = Field(None, description='Whether calculation converged')
    homo_index: Optional[int] = Field(None, description='HOMO orbital index')
    lumo_index: Optional[int] = Field(None, description='LUMO orbital index')
    num_occupied_orbitals: Optional[int] = Field(
        None, description='Number of occupied orbitals'
    )
    num_virtual_orbitals: Optional[int] = Field(
        None, description='Number of virtual orbitals'
    )
    checkpoint_file: Optional[str] = Field(None, description='Path to checkpoint file')
    checkpoint_exists: Optional[bool] = Field(
        None, description='Whether checkpoint file exists'
    )
    working_directory: Optional[str] = Field(None, description='Working directory path')
    optimized_geometry: Optional[str] = Field(
        None, description='Optimized molecular geometry'
    )
    basis: Optional[str] = Field(None, description='Basis set used')
    xc_functional: Optional[str] = Field(
        None, description='Exchange-correlation functional used'
    )
    charge: Optional[float] = Field(None, description='Molecular charge')
    spin_multiplicity: Optional[int] = Field(None, description='Spin multiplicity')
    max_cycle: Optional[int] = Field(None, description='Maximum SCF cycles')
    atom_count: Optional[int] = Field(None, description='Number of atoms')
    error: Optional[str] = Field(
        None, description='Error message if calculation failed'
    )


class CalculationInstance(BaseModel):
    id: str = Field(..., description='Unique calculation ID')
    name: str = Field(..., description='Display name for the calculation')
    status: CalculationStatus
    createdAt: datetime = Field(..., description='Creation timestamp')
    updatedAt: datetime = Field(..., description='Last update timestamp')
    parameters: CalculationParameters
    results: Optional[CalculationResults] = None
    workingDirectory: Optional[str] = Field(
        None, description='Path to calculation files'
    )
    errorMessage: Optional[str] = Field(
        None, description='Error details if status is error'
    )


class CalculationSummary(BaseModel):
    id: str = Field(..., description='Unique calculation ID')
    name: str = Field(..., description='Display name')
    path: str = Field(..., description='Directory path')
    date: str = Field(..., description='Date string')
    has_checkpoint: bool = Field(..., description='Whether checkpoint file exists')
    status: CalculationStatus


class Data3(BaseModel):
    calculation: CalculationInstance


class StartCalculationResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data3


class Data4(BaseModel):
    base_directory: str = Field(..., description='Base directory for calculations')
    calculations: List[CalculationSummary]
    count: int = Field(..., description='Number of calculations')


class CalculationListResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data4


class Files(BaseModel):
    checkpoint_exists: bool
    parameters_file_exists: bool
    results_file_exists: bool


class Data5(BaseModel):
    calculation: CalculationInstance
    files: Files


class CalculationDetailsResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data5


class Data6(BaseModel):
    message: str = Field(..., examples=['Calculation renamed successfully.'])
    name: str = Field(..., description='Updated calculation name')


class CalculationUpdateResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data6


class Data7(BaseModel):
    message: str = Field(..., examples=['Calculation deleted successfully'])
    deleted_id: str = Field(..., description='ID of deleted calculation')


class CalculationDeleteResponse(BaseModel):
    success: bool = Field(..., examples=[True])
    data: Data7


class ErrorResponse(BaseModel):
    success: bool = Field(..., examples=[False])
    error: str = Field(..., description='Error message')
