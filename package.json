{
  "name": "pyscf_front",
  "version": "0.0.1",
  "description": "A quantum chemical calculation app using Electron, React, and Python.",
  "main": "dist/main.js",
  "scripts": {
    "dev": "rimraf dist && npm run codegen && run-p dev:webpack dev:electron",
    "dev:clean": "rimraf dist node_modules/.cache && npm run codegen && run-p dev:webpack dev:electron",
    "dev:webpack": "cross-env NODE_ENV=\"development\" webpack --progress",
    "dev:electron": "wait-on --delay 1000 --interval 100 --timeout 30000 ./dist/index.html ./dist/main.js && electronmon .",
    "build": "npm run verify-env && npm run codegen && npm run build:webpack && npm run build:conda-pack && npm run validate-build",
    "build:webpack": "cross-env NODE_ENV=\"production\" webpack --progress",
    "build:conda-pack": "npm run verify-build-env && rimraf conda_env && bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && conda-pack -o conda_env.tar.gz && mkdir -p conda_env && tar -xzf conda_env.tar.gz -C conda_env && rm conda_env.tar.gz'",
    "package": "npm run build && electron-builder",
    "codegen": "npm run codegen:python && npm run codegen:typescript",
    "codegen:python": "cd src/python && bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && datamodel-codegen --input ../../src/api-spec/openapi.yaml --output generated_models.py --output-model-type pydantic_v2.BaseModel --field-constraints --use-schema-description'",
    "python-exec": "bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && \"$@\"' --",
    "setup-env": "./scripts/setup-environment.sh",
    "verify-env": "bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && $(conda info --base)/envs/pyscf-env/bin/python scripts/verify-environment.py'",
    "verify-build-env": "bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && echo \"=== Build Environment Verification ===\" && $(conda info --base)/envs/pyscf-env/bin/python -c \"import conda_pack; print(f\\\"conda-pack: {conda_pack.__version__}\\\")\" && $(conda info --base)/envs/pyscf-env/bin/python -c \"import gunicorn; print(f\\\"Gunicorn: {gunicorn.__version__}\\\")\" && echo \"âœ“ All build tools verified\"'",
    "validate-build": "bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && $(conda info --base)/envs/pyscf-env/bin/python scripts/validate-build-completeness.py'",
    "codegen:typescript": "npx openapi-typescript src/api-spec/openapi.yaml --output src/web/types/generated-api.ts",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json}\"",
    "test:build": "npm run build && echo 'Build completed successfully. Testing packaged app...'",
    "test:python-build": "bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && cd src/python && echo \"Testing Python build...\" && python -c \"import app; print(\\\"Python app imports successfully\\\")\"'",
    "test:run-packaged": "npm run build && npm run package && echo 'Package created. Check dist/ directory for distributable files.'",
    "test:gunicorn-local": "bash -c 'source $HOME/miniforge3/etc/profile.d/conda.sh && conda activate pyscf-env && cd src/python && echo \"Testing Gunicorn locally...\" && gunicorn --bind 127.0.0.1:5000 --workers 1 --threads 4 --timeout 0 --log-level info --preload app:app'",
    "debug:config": "node -e \"const fs = require('fs'); const path = require('path'); const configPath = path.join(__dirname, 'config', 'server-config.json'); console.log('Config file:', configPath); console.log('Exists:', fs.existsSync(configPath)); if (fs.existsSync(configPath)) { console.log('Content:', JSON.stringify(JSON.parse(fs.readFileSync(configPath, 'utf8')), null, 2)); }\"",
    "test:python-standalone": "node scripts/test-python-standalone.js",
    "test:conda-env": "export PATH=\"$HOME/miniforge3/envs/pyscf-env/bin:$PATH\" && cd dist/mac-arm64/Pyscf_front.app/Contents/Resources/conda_env/bin && echo \"Testing conda environment...\" && ./python --version && ./python -c \"import gunicorn; print('Gunicorn:', gunicorn.__version__)\" && ./python -c \"import flask; print('Flask: Available')\" && echo \"Conda environment test completed.\""
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kam6y/Pyscf_front.git"
  },
  "keywords": [
    "electron",
    "react",
    "python",
    "pyscf",
    "chemistry"
  ],
  "author": "kam6y",
  "electronmon": {
    "patterns": [
      "dist/**/*"
    ],
    "ignore": [
      "**/*.map"
    ],
    "delay": 500
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/kam6y/Pyscf_front/issues"
  },
  "homepage": "https://github.com/kam6y/Pyscf_front#readme",
  "devDependencies": {
    "@types/node": "^24.1.0",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "cross-env": "^10.0.0",
    "css-loader": "^7.1.2",
    "electron": "^37.2.4",
    "electron-builder": "^26.0.12",
    "electronmon": "^2.0.3",
    "html-webpack-plugin": "^5.6.3",
    "mini-css-extract-plugin": "^2.9.2",
    "npm-run-all": "^4.1.5",
    "openapi-typescript": "^7.4.2",
    "prettier": "^3.4.2",
    "rimraf": "^6.0.1",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3",
    "wait-on": "^8.0.4",
    "webpack": "^5.101.0",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.85.3",
    "3dmol": "^2.5.2",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "recharts": "^3.1.2",
    "socket.io-client": "^4.8.1",
    "zustand": "^5.0.7"
  },
  "build": {
    "appId": "com.kam6y.pyscf_front",
    "productName": "Pyscf_front",
    "files": [
      "dist/**/*"
    ],
    "extraResources": [
      {
        "from": "conda_env",
        "to": "conda_env",
        "filter": [
          "**/*"
        ]
      },
      {
        "from": "config",
        "to": "config",
        "filter": [
          "**/*"
        ]
      },
      {
        "from": "src/python",
        "to": "src/python",
        "filter": [
          "**/*"
        ]
      }
    ],
    "win": {
      "target": "nsis",
      "icon": "src/assets/icon/win/icon.ico"
    },
    "mac": {
      "target": "dmg",
      "icon": "src/assets/icon/mac/Pyscf_front.icns"
    },
    "linux": {
      "target": "AppImage"
    }
  }
}
