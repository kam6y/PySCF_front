{
  "name": "pyscf_front",
  "version": "0.1.4-beta",
  "description": "A quantum chemical calculation app using Electron, React, and Python.",
  "main": "dist/main.js",
  "scripts": {
    "dev": "rimraf dist && npm run codegen && run-p dev:webpack dev:electron",
    "dev:clean": "rimraf dist node_modules/.cache && npm run codegen && run-p dev:webpack dev:electron",
    "dev:webpack": "cross-env NODE_ENV=\"development\" webpack --progress",
    "dev:electron": "wait-on --delay 1000 --interval 100 --timeout 90000 ./dist/index.html ./dist/main.js && electronmon .",
    "build": "npm run verify-env && npm run clean:build-artifacts && npm run codegen && npm run build:webpack && npm run build:conda-pack && npm run validate-build",
    "build:webpack": "cross-env NODE_ENV=\"production\" webpack --progress",
    "build:conda-pack": "npm run verify-build-env && rimraf conda_env && bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && conda-pack -o conda_env.tar.gz && mkdir -p conda_env && tar -xzf conda_env.tar.gz -C conda_env && rm conda_env.tar.gz && (./conda_env/bin/conda-unpack || echo \"Warning: conda-unpack encountered errors but continuing...\") && echo \"Cleaning up development files from conda_env...\" && find conda_env -type d -name \"__pycache__\" -exec rm -rf {} + 2>/dev/null || true && find conda_env -type f \\( -name \"*.pyc\" -o -name \"*.pyo\" -o -name \"*.pyd\" \\) -delete && find conda_env/lib/python*/site-packages -maxdepth 2 -type d \\( -name \"tests\" -o -name \"test\" \\) -exec rm -rf {} + 2>/dev/null || true && rm -rf conda_env/etc/conda/test-files 2>/dev/null || true && find conda_env -type f -name \".coverage*\" -delete 2>/dev/null || true && find conda_env -name \"*.egg-info\" -type d -exec rm -rf {} + 2>/dev/null || true && echo \"✓ Cleanup completed\"'",
    "package": "npm run build && electron-builder",
    "clean:build-artifacts": "bash -c 'echo \"Cleaning development artifacts from src/python...\" && find src/python -type d -name \"__pycache__\" -exec rm -rf {} + 2>/dev/null || true && find src/python -type f \\( -name \"*.pyc\" -o -name \"*.pyo\" -o -name \"*.pyd\" \\) -delete 2>/dev/null || true && find src/python -type d -name \".pytest_cache\" -exec rm -rf {} + 2>/dev/null || true && find src/python -type f -name \".coverage*\" -delete 2>/dev/null || true && find src/python -type d -name \"*.egg-info\" -exec rm -rf {} + 2>/dev/null || true && find src/python -type d -name \".tox\" -exec rm -rf {} + 2>/dev/null || true && echo \"✓ Cleanup completed\"'",
    "package:linux": "npm run build:linux && electron-builder --linux",
    "package:linux:docker": "node scripts/docker-build-linux.js",
    "package:linux:docker:clean": "node scripts/docker-build-linux.js --clean",
    "package:linux:docker:no-cache": "node scripts/docker-build-linux.js --no-cache",
    "build:linux": "npm run verify-env && npm run codegen && npm run build:webpack && npm run build:conda-pack:linux && npm run build:python:linux && npm run validate-build",
    "build:conda-pack:linux": "npm run verify-build-env && rimraf conda_env && bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && conda-pack -o conda_env.tar.gz && mkdir -p conda_env && tar -xzf conda_env.tar.gz -C conda_env && rm conda_env.tar.gz && (./conda_env/bin/conda-unpack || echo \"Warning: conda-unpack encountered errors but continuing...\")'",
    "build:python:linux": "npm run verify-build-env && rimraf python_dist && cd src/python && bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && export PATH=\"$CONDA_BASE/envs/pyscf-env/bin:$PATH\" && export CONDA_DEFAULT_ENV=pyscf-env && echo \"=== Python Environment Verification ===\" && which python && python --version && echo \"=== Checking critical dependencies ===\" && python -c \"import gunicorn; print(f\\\"Gunicorn: {gunicorn.__version__}\\\")\" && python -c \"import watchdog; print(\\\"Watchdog: Available\\\")\" && python -c \"import flask; print(f\\\"Flask: {flask.__version__}\\\")\" && python -c \"import pyscf; print(f\\\"PySCF: {pyscf.__version__}\\\")\" && echo \"=== Dependencies verified, starting PyInstaller ===\" && pyinstaller --distpath ../../python_dist --workpath ../../build/pyinstaller --noconfirm pyscf_front_api.spec'",
    "docker:build": "docker build -t pyscf-front-builder .",
    "docker:clean": "docker builder prune -f",
    "docker:package": "node scripts/docker-run.js",
    "codegen": "npm run codegen:python && npm run codegen:typescript",
    "codegen:python": "cd src/python && bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && datamodel-codegen --input ../../src/api-spec/openapi.yaml --output generated_models.py --output-model-type pydantic_v2.BaseModel --field-constraints --use-schema-description'",
    "python-exec": "bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && \"$@\"' --",
    "setup-env": "./scripts/setup-environment.sh",
    "verify-env": "bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && $(conda info --base)/envs/pyscf-env/bin/python scripts/verify-environment.py'",
    "verify-build-env": "bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && echo \"=== Build Environment Verification ===\" && $(conda info --base)/envs/pyscf-env/bin/python -c \"import conda_pack; print(f\\\"conda-pack: {conda_pack.__version__}\\\")\" && $(conda info --base)/envs/pyscf-env/bin/python -c \"import gunicorn; print(f\\\"Gunicorn: {gunicorn.__version__}\\\")\" && echo \"✓ All build tools verified\"'",
    "validate-build": "bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && $(conda info --base)/envs/pyscf-env/bin/python scripts/validate-build-completeness.py'",
    "codegen:typescript": "npx openapi-typescript src/api-spec/openapi.yaml --output src/web/types/generated-api.ts",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json}\"",
    "test:build": "npm run build && echo 'Build completed successfully. Testing packaged app...'",
    "test:python-build": "bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && cd src/python && echo \"Testing Python build...\" && python -c \"import app; print(\\\"Python app imports successfully\\\")\"'",
    "test:run-packaged": "npm run build && npm run package && echo 'Package created. Check dist/ directory for distributable files.'",
    "test:gunicorn-local": "bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && source \"$CONDA_BASE/etc/profile.d/conda.sh\" && conda activate pyscf-env && cd src/python && echo \"Testing Gunicorn locally...\" && gunicorn --bind 127.0.0.1:5000 --workers 1 --threads 4 --timeout 0 --log-level info --preload app:app'",
    "debug:config": "node -e \"const fs = require('fs'); const path = require('path'); const configPath = path.join(__dirname, 'config', 'server-config.json'); console.log('Config file:', configPath); console.log('Exists:', fs.existsSync(configPath)); if (fs.existsSync(configPath)) { console.log('Content:', JSON.stringify(JSON.parse(fs.readFileSync(configPath, 'utf8')), null, 2)); }\"",
    "test:python-standalone": "node scripts/test-python-standalone.js",
    "test:conda-env": "bash -c 'CONDA_BASE=$(conda info --base 2>/dev/null || echo \"$HOME/miniforge3\") && export PATH=\"$CONDA_BASE/envs/pyscf-env/bin:$PATH\" && cd dist/mac-arm64/Pyscf_front.app/Contents/Resources/conda_env/bin && echo \"Testing conda environment...\" && ./python --version && ./python -c \"import gunicorn; print('\"'\"'Gunicorn:'\"'\"', gunicorn.__version__)\" && ./python -c \"import flask; print('\"'\"'Flask: Available'\"'\"')\" && echo \"Conda environment test completed.\"'",
    "release": "node scripts/bump-version.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kam6y/Pyscf_front.git"
  },
  "keywords": [
    "electron",
    "react",
    "python",
    "pyscf",
    "chemistry"
  ],
  "author": "kam6y",
  "electronmon": {
    "patterns": [
      "dist/**/*",
      "!data/**"
    ],
    "delay": 500
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/kam6y/Pyscf_front/issues"
  },
  "homepage": "https://github.com/kam6y/Pyscf_front#readme",
  "devDependencies": {
    "@types/node": "^24.1.0",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "@types/react-svg-pan-zoom": "^3.3.9",
    "assert": "^2.1.0",
    "buffer": "^6.0.3",
    "cross-env": "^10.0.0",
    "css-loader": "^7.1.2",
    "electron": "^37.2.4",
    "electron-builder": "^26.0.12",
    "electronmon": "^2.0.3",
    "html-webpack-plugin": "^5.6.3",
    "mini-css-extract-plugin": "^2.9.2",
    "npm-run-all": "^4.1.5",
    "openapi-typescript": "^7.4.2",
    "prettier": "^3.4.2",
    "rimraf": "^6.0.1",
    "stream-browserify": "^3.0.0",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3",
    "util": "^0.12.5",
    "wait-on": "^8.0.4",
    "webpack": "^5.101.0",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@microsoft/fetch-event-source": "^2.0.1",
    "@tanstack/react-query": "^5.85.3",
    "3dmol": "^2.5.2",
    "ketcher-core": "^3.5.0",
    "ketcher-react": "^3.5.0",
    "ketcher-standalone": "^3.5.0",
    "miew": "^0.11.1",
    "process": "^0.11.10",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-markdown": "^9.0.1",
    "react-svg-pan-zoom": "^3.13.1",
    "recharts": "^3.1.2",
    "rehype-highlight": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "socket.io-client": "^4.8.1",
    "zustand": "^5.0.7"
  },
  "build": {
    "publish": null,
    "appId": "com.kam6y.pyscf_front",
    "productName": "Pyscf_front",
    "files": [
      "dist/**/*",
      "!node_modules/**/*"
    ],
    "extraResources": [
      {
        "from": "conda_env",
        "to": "conda_env",
        "filter": [
          "**/*",
          "!share/terminfo/**",
          "!share/man/**",
          "!share/doc/**",
          "!share/info/**",
          "!share/gtk-doc/**",
          "!**/*.a",
          "!**/*.la"
        ]
      },
      {
        "from": "config",
        "to": "config",
        "filter": [
          "**/*"
        ]
      },
      {
        "from": "src/python",
        "to": "src/python",
        "filter": [
          "**/*",
          "!**/__pycache__",
          "!**/__pycache__/**",
          "!**/*.pyc",
          "!**/*.pyo",
          "!**/*.pyd",
          "!**/tests",
          "!**/tests/**",
          "!**/test_*.py",
          "!**/.pytest_cache",
          "!**/.pytest_cache/**",
          "!**/.coverage",
          "!**/.coverage.*",
          "!**/*.egg-info",
          "!**/*.egg-info/**",
          "!**/.tox",
          "!**/.tox/**",
          "!**/htmlcov",
          "!**/htmlcov/**"
        ]
      }
    ],
    "win": {
      "target": "nsis",
      "icon": "src/assets/icon/win/icon.ico"
    },
    "mac": {
      "target": "dmg",
      "icon": "src/assets/icon/mac/Pyscf_front.icns"
    },
    "linux": {
      "target": "AppImage",
      "category": "Science",
      "icon": "src/assets/icon/linux/icon.png",
      "synopsis": "Quantum chemistry calculation app",
      "description": "A quantum chemical calculation app using PySCF"
    }
  }
}
